// com.adam.db.Database// Adam Riggs//package com.adam.db {	import com.adam.db.SQLProxy;	import com.adam.events.MuleEvent;	import com.adam.utils.AppData;		import flash.display.Sprite;	import flash.xml.*;	import flash.net.URLVariables;		public class Database extends Sprite {				private var appData:AppData=AppData.instance;				//control variables		private var sql:SQLProxy;		public var currentTest:CurrentTest;				//data		private var participantResult:XML;				private var _test,_participant,_phase,_component,_phaseiteration:String;				//const		public const NAME:String="database";						/** Storage for the singleton instance. */		private static const _instance:Database = new Database(DatabaseLock);				public function Database(lock:Class){			// Verify that the lock is the correct class reference.			if (lock != DatabaseLock)			{				throw new Error("Invalid Database access.  Use Database.instance instead.");			} else {				//init();			}		}		//*****Initialization Routines				public function init():void{			//this.visible = false;			//debug("Database() init");						initVars();			initEvents();						var vars:URLVariables=new URLVariables();			vars.table="currentTest";			sql.truncateSQL(vars, "truncate");		}				private function initVars():void{			sql=SQLProxy.instance;			currentTest=new CurrentTest();						_test=new Date().time.toString();			_participant="notset";		}				private function initEvents():void{			appData.eventManager.listen(NAME, onDatabase);			appData.eventManager.listen("sql", onSQL);		}		//*****Core Functionality				private function setNextPhaseWait():void{			debug("setNextPhaseWait()");			var vars:URLVariables=new URLVariables();			vars.table="currentTest";			vars.nextphase="wait";			vars.id="1";						sql.updateSQL(vars,NAME);		}				private function setParticipant(id:String):void{			debug("setParticipant() id=="+id);						//this is to send data to the current test table of the database			//once it comes back as successful then present the blackout screen with the start button						_participant=id;						var vars:URLVariables=new URLVariables();						vars.table="participant";			vars.test=_test;			vars.participant=_participant;			sql.insertSQL(vars, "participant");			//sql.insertSQL(vars, "loginScreenModel");						vars.table="currentTest";			vars.phase="wait";			vars.nextphase="wait";			vars.component="FR1";			vars.componentstart=new Date().time.toString();			sql.truncateSQL(vars, "truncate");						currentTest.startQuery();					}				private function getParticipant():void{			debug("getParticipant()");			if(participantResult.RESULT=="success"){				//yay!				debug("success");				//appData.eventManager.dispatch("main", {type:"loginSuccess", sender:NAME});				appData.eventManager.dispatch("view", {type:"loginSuccess", sender:NAME});				//currentTest.startQuery();			} else {				//fuuuu!				debug("fail");				appData.eventManager.dispatch("main", {type:"loginFail", sender:NAME});			}		}				public function insertCircleClick(time:String):void{			var vars:URLVariables=new URLVariables();			vars.table="test";			vars.participant=_participant;			vars.test=_test;			vars.event="circle clicked";			vars.timestamp=time;			vars.phase=_phase;			vars.component=_component;			vars.phaseiteration=_phaseiteration;						sql.insertSQL(vars,"insertCircleClick");					}				public function insertRewardClick(time:String):void{			var vars:URLVariables=new URLVariables();			vars.table="test";			vars.participant=_participant;			vars.test=_test;			vars.event="reward clicked";			vars.timestamp=time;			vars.phase=_phase;			vars.component=_component;			vars.phaseiteration=_phaseiteration;						sql.insertSQL(vars,"insertRewardClick");					}				public function insertNewComponent(time:String):void{			var vars:URLVariables=new URLVariables();			vars.table="test";			vars.participant=_participant;			vars.test=_test;			vars.event="new component";			vars.timestamp=time;			vars.phase=_phase;			vars.component=_component;			vars.phaseiteration=_phaseiteration;						sql.insertSQL(vars,"insertNewComponent");		}				public function endCurrentComponent(time:String):void{			var vars:URLVariables=new URLVariables();			vars.table="test";			vars.participant=_participant;			vars.test=_test;			vars.event="end component";			vars.timestamp=time;			vars.phase=_phase;			vars.component=_component;			vars.phaseiteration=_phaseiteration;						sql.insertSQL(vars,"endCurrentComponent");		}				private function setPhase(str:String):void{			_phase=str;		}				private function setComponent(str:String):void{			_component=str;		}				private function setPhaseiteration(str:String):void{			_phaseiteration=str;		}				private function startPhase(phase:String, component:String):void{			debug("startPhase: phase=="+phase+", component=="+component);					}		//*****Event Handlers				private function onSQL(e:MuleEvent):void{			/*debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){				case "participant":					try{						participantResult=new XML(e.data.result);						getParticipant();					} catch(err:Error) {						debug("*****an error happened with the participant xml");						appData.listObject(e.data);						appData.eventManager.dispatch("main", {type:"loginFail", sender:NAME});					}				break;								case "truncate":					debug("truncate");					appData.listObject(e.data);				break;								case "insertCircleClick":					//debug("insertCircleClick - result: "+e.data.result);				break;								case "insertRewardClick":					//debug("insertRewardClick - result: "+e.data.result);				break;								case "insertNewComponent":					//debug("insertNewComponent - result: "+e.data.result);				break;								case "endCurrentComponent":					//debug("endCurrentComponent - result: "+e.data.result);				break;			}		}				private function onDatabase(e:MuleEvent):void{			/*debug("onDatabase()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){								case "setParticipant":					setParticipant(e.data.id.toString());				break;								case "insertCircleClick":					insertCircleClick(e.data.timestamp);				break;								case "insertRewardClick":					insertRewardClick(e.data.timestamp);				break;								case "setNextPhaseWait":					setNextPhaseWait();				break;								default:					debug("onDatabase()");					debug("*type not found");					debug("e.data.sender=="+e.data.sender);					debug("e.data.type=="+e.data.type);				break;							}		}		//*****Gets and Sets				public static function get instance():Database{return _instance;}				public function get test():String{return _test;}		public function get participant():String{return _participant;}		public function get phase():String{return _phase;}		public function get component():String{return _component;}		public function get phaseiteration():String{return _phaseiteration;}				//public function set test():void{setTest();}		public function set participant(value:String):void{setParticipant(value);}		public function set phase(value:String):void{setPhase(value)}		public function set component(value:String):void{setComponent(value);}		public function set phaseiteration(value:String):void{setPhaseiteration(value);}						//*****Utility Functions						//**debug		private function debug(str:String):void{			appData.debug(NAME,str);		}				}//end class}//end packageclass DatabaseLock{} 