// com.adam.db.CurrentTest// Adam Riggs//package com.adam.db {	import flash.display.Sprite;	import flash.events.*;		import gs.TweenMax;		import com.adam.utils.AppData;	import com.adam.events.MuleEvent;	import flash.utils.Timer;	import flash.net.URLVariables;		public class CurrentTest extends Sprite {				private var appData:AppData=AppData.instance;				//database fields		private var _id,_participant,_test,_phase,_nextphase,_component,_componentstart,_teststate:String;				//data		private var xml:XML;		private var urlVars:URLVariables;				//timer		private var dbTimer:Timer;		private var dbInterval:Number;				//control vars		private var _testStarted:Boolean;				public function CurrentTest(){						init();			initVars();			initEvents();			initTimer();		}		//*****Initialization Routines				public function init(){			//this.visible = false;			trace("CurrentTest() init");					}				private function initVars():void{			urlVars=new URLVariables();			urlVars.table="currentTest";			urlVars.columns="id, participant, test, phase, nextphase, component, componentstart, teststate";			_testStarted=false;		}				private function initEvents():void{			appData.eventManager.listen("sql", onSQL);		}				private function initTimer():void{			dbInterval=2000;			dbTimer=new Timer(dbInterval);			dbTimer.addEventListener("timer", onDBTimer);			//dbTimer.start();		}		//*****Core Functionality				private function processData():void{			//trace("currentTest.processData()");			_id=xml.RESULT.ROW.ID.toString();			_participant=xml.RESULT.ROW.PARTICIPANT.toString();			_test=xml.RESULT.ROW.TEST.toString();			_phase=xml.RESULT.ROW.PHASE.toString();			_nextphase=xml.RESULT.ROW.NEXTPHASE.toString();			_component=xml.RESULT.ROW.COMPONENT.toString();			_componentstart=xml.RESULT.ROW.COMPONENTSTART.toString();			_teststate=xml.RESULT.ROW.TESTSTATE.toString();						var testObj=new Object();			testObj.id=_id;			testObj.participant=_participant;			testObj.test=_test;			testObj.phase=_phase;			testObj.nextphase=_nextphase;			testObj.component=_component;			testObj.componentstart=_componentstart;			testObj.teststate=_teststate;						if(_teststate=="go" && !_testStarted){				_testStarted=true;				appData.eventManager.dispatch("main", {type:"adminReady", sender:"currentTest"});			}			//appData.eventManager.dispatch("testController", {type:"nextphase", sender:"currentTest", nextphase:_nextphase});			appData.eventManager.dispatch("testModel", {type:"testData", sender:"currentTest", testObj:testObj});			//traceData();		}				private function traceData():void{			trace("id=="+_id);			trace("participant=="+_participant);			trace("test=="+_test);			trace("phase=="+_phase);			trace("nextphase=="+_nextphase);			trace("component=="+_component);			trace("componentstart=="+_componentstart);			trace("teststate=="+_teststate);		}				public function startQuery():void{			//onDBTimer(null);			dbTimer.start();		}				public function stopQuery():void{			dbTimer.stop();		}		//*****Event Handlers				private function onDBTimer(e:TimerEvent):void{			appData.sqlProxy.selectSQL(urlVars,"currentTest");		}				private function onSQL(e:MuleEvent):void{			switch(e.data.type){								case "currentTest":					//trace("currentTest - onSQL");					try{						xml=new XML(e.data.result);					} catch(err:Error){						trace("currentTest.onSQL()");						trace("\n**result not formatted for XML");						trace("e.data.result==\n"+e.data.result);					}					processData();	//this should probably go in the try... mabye?  seems like something I should have immediately thought of					//traceData();				break;							}		}		//*****Gets and Sets				public function get id():String{return _id;}		public function get participant():String{return _participant;}		public function get test():String{return _test;}		public function get phase():String{return _phase;}		public function get nextphase():String{return _nextphase;}		public function get component():String{return _component;}		public function get componentstart():String{return _componentstart;}		public function get testStarted():Boolean{return _testStarted;}		//*****Utility Functions				public function show(){			this.visible = true;		}				public function hide(){			this.visible = false;		}				}}