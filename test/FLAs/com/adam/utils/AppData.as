// com.app.AppData// Adam Riggs//package com.adam.utils{		import flash.xml.*	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.events.*;	import com.adam.events.EventManager;	//import com.adam.apis.Flickr;	import com.adam.db.SQLProxy;	import com.adam.db.Database;	import com.app.model.Model;	import com.app.view.View;	import com.app.controller.Controller;		public class AppData{				public var mainXML:XML;		public var playerType:String;		public var buildType:String;		public var isLocal:Boolean;				//public var flickr:Flickr;		public var flashVars:Object;		public var bandwidth:Object;		public var main:Object;		public var shell:Sprite;		public var eventManager:EventManager;		public var sqlProxy:SQLProxy;		//public var picture:Picture;		public var database:Database;				//private vars for public get/set data		private var _stageWidth:int;		private var _stageHeight:int;				//reward vars		private var _totalReward:Number;		private var _rewardAmount:Number;				//mvc		public var model:Model;		public var view:View;		public var controller:Controller;						/** Storage for the singleton instance. */		private static const _instance:AppData = new AppData( AppDataLock );				public function AppData(lock:Class){			trace("AppData()");						// Verify that the lock is the correct class reference.			if ( lock != AppDataLock )			{				throw new Error( "Invalid AppData access.  Use AppData.instance instead." );			} else {				init();			}		}		//*****Initialization functions				public function init():void{			trace("AppData.init()");						initReward();		}				private function initReward():void{			_totalReward=0;			_rewardAmount=.05;		}		//*****Core functionality				public function incrementReward():void{			_totalReward+=_rewardAmount;		}				public function listObject(obj:Object):void{			for (var item in obj) {				/*trace(item); // apple				trace(myArray[item]); // red*/								trace(item+"=="+obj[item]);			}		}				public function makeButton(mc:MovieClip, obj:Object):void{			mc.buttonMode=true;			mc.addEventListener(MouseEvent.CLICK, obj.onClick);		}				public function makeHoverButton(mc:MovieClip, obj):void{			mc.buttonMode=true;			mc.mouseChildren=false;			mc.overBtn.visible=false;			mc.addEventListener(MouseEvent.CLICK, obj.onClick);			mc.addEventListener(MouseEvent.MOUSE_OVER, onOver);			mc.addEventListener(MouseEvent.MOUSE_OUT, onOut);		}				public function debug(objName:String, str:String):void{			trace(objName+": "+str);			//eventManager.dispatch("debug", {msg:str, sender:objName});		}		//*****Event Handlers				private function onOver(e:MouseEvent):void{			e.currentTarget.overBtn.visible=true;		}				private function onOut(e:MouseEvent):void{			e.currentTarget.overBtn.visible=false;		}		//*****Gets and sets				public static function get instance():AppData		{			return _instance;		}				public function get stageWidth():int{return _stageWidth;}		public function set stageWidth(value:int):void{_stageWidth=value;}				public function get stageHeight():int{return _stageHeight;}		public function set stageHeight(value:int):void{_stageHeight=value;}				public function get totalReward():Number{return _totalReward;}			}}class AppDataLock{} 