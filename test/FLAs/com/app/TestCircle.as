// com.app.TestCircle// Adam Riggs//package com.app {	import flash.display.Sprite;	import flash.events.*;	import flash.utils.Timer;		import gs.TweenLite;		import com.adam.utils.AppData;	import com.adam.events.MuleEvent;		public class TestCircle extends Sprite {				private var appData:AppData=AppData.instance;				private var _circleRad:uint;		private var _circleColorBlack:String;		private var _circleColorWhite:String;		private var _vx:Number;		private var _vy:Number;		private var _newXPos:Number;		private var _newYPos:Number;		private var _newXSign:int;		private var _newYSign:int;		private var _speed:Number;		private var _angle:Number;		private var _flashing:Boolean;				private var blackCircle:Sprite;		private var whiteCircle:Sprite;				private var clickTimer:Timer;		private var clickInterval:uint;				public function TestCircle(){						init();		}		//*****Initialization Routines				public function init(){			//this.visible = false;			trace("TestCircle() init");									addEventListener(MouseEvent.MOUSE_DOWN, onDown);			initTimer();			initCircleVars();			initBlackCircle();			initWhiteCircle();		}				private function initTimer():void{			clickInterval=50;			clickTimer=new Timer(clickInterval,1);			clickTimer.addEventListener("timer", onClickTimer);		}				private function initCircleVars():void{			_circleRad=50;			_circleColorWhite="0xFFFFFF";			_circleColorBlack="0x000000";			_angle=0.785398163;			_newXSign=1;			_newYSign=1;			_flashing=true;		}				private function initBlackCircle():void{			blackCircle=new Sprite();			addChild(blackCircle);						blackCircle.graphics.lineStyle(1,uint(Number(circleColorBlack)));			blackCircle.graphics.beginFill(uint(Number(circleColorBlack)));			blackCircle.graphics.drawCircle(0,0,circleRad);		}				private function initWhiteCircle():void{			whiteCircle=new Sprite();			addChildAt(whiteCircle,0);						whiteCircle.graphics.lineStyle(1,uint(Number(circleColorWhite)));			whiteCircle.graphics.beginFill(uint(Number(circleColorWhite)));			whiteCircle.graphics.drawCircle(0,0,circleRad);						whiteCircle.visible=false;		}		//*****Core Functionality				public function degToRad(num:Number):Number{			//return num*180/Math.PI;			return num*Math.PI/180;		}				public function radToDeg(num:Number):Number{			//return num*Math.PI/180;			return num*180/Math.PI;		}				public function moveCircle():void{			//trace("testCircle.moveCircle()");			_newXPos=x+calcX()*_newXSign;			_newYPos=y+calcY()*_newYSign;						TweenLite.to(this, 1/30,{x:_newXPos, y:_newYPos});					}				private function calcX():Number{			return speed*Math.sin(_angle);		}				private function calcY():Number{			return speed*Math.cos(_angle);		}				public function angleMutate():void{			var deg:Number;			deg=Math.random()/2;			if(Math.random()>=.5){deg*=-1;}			_angle+=deg;		}				private function flash():void{						blackCircle.visible=false;			whiteCircle.visible=true;			clickTimer.start();		}		//*****Event Handlers				private function onDown(e:MouseEvent):void{			trace("TestCircle.onDown()");			if(flashing){flash();}		}				private function onClickTimer(e:TimerEvent):void{			trace("TestCircle.onClickTimer()");			blackCircle.visible=true;			whiteCircle.visible=false;		}				//*****Gets and Sets				public function get circleRad():uint{return _circleRad;}				public function get circleColorBlack():String{return _circleColorBlack;}		public function get circleColorWhite():String{return _circleColorWhite;}				public function get vx():Number{return _vx;}		public function set vx(value:Number):void{_vx=value;}				public function get vy():Number{return _vy;}		public function set vy(value:Number):void{_vy=value;}				public function get newXPos():Number{return _newXPos;}		public function set newXPos(value:Number):void{_newXPos=value;}				public function get newYPos():Number{return _newYPos;}		public function set newYPos(value:Number):void{_newYPos=value;}				public function get newXSign():int{return _newXSign;}		public function set newXSign(value:int):void{_newXSign=value;}				public function get newYSign():int{return _newYSign;}		public function set newYSign(value:int):void{_newYSign=value;}				public function get speed():Number{return _speed;}		public function set speed(value:Number):void{_speed=value;}				public function get angle():Number{return _angle;}		public function set angle(value:Number):void{_angle=value;}				public function get angleDeg():Number{return radToDeg(_angle);}		public function set angleDeg(value:Number):void{_angle=degToRad(value);}				public function get flashing():Boolean{return _flashing;}		public function set flashing(value:Boolean):void{_flashing=value;}		//*****Utility Functions				public function show(){			this.visible = true;		}				public function hide(){			this.visible = false;		}				}}