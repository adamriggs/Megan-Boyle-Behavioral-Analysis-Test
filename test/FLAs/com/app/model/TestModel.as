// com.app.model.TestModel// Adam Riggs//package com.app.model{	import com.adam.events.MuleEvent;	import com.adam.utils.AppData;		import flash.events.*;	import flash.net.URLVariables;	import flash.utils.Timer;		public class TestModel{				//vars		//*****vars from the database		private var _id,_participant,_test,_phase,_nextphase,_component,_componentstart,_teststate:String;		private var _dbStateObj:Object;		//*****vars for the current state of the test		private var _runningphasename, _runningbkgcolor, _runningcomponentname:String;		private var _circleProbCoef:Number;		private var _rewardShowing,_rewardDelaying:Boolean;		private var _runningcomponent, _runningcomponentcount:uint;		//*****vars for the timer delays		private var blackoutInterval, shapingInterval, baselineInterval, contrastInterval:uint;				//objects		private var appData:AppData=AppData.instance;		private var testTimer, blackoutTimer:Timer;		//*****interval objs		private var intervalArray:Array;		private var tmpIntervalArray:Array;		private var intervalTimer:Timer;				//const		public const NAME:String="testModel";		public const RETURNTYPE:String=NAME;		public const VIEW:String="testView";				/** Storage for the singleton instance. */		private static const _instance:TestModel = new TestModel(TestModelLock);				public function TestModel(lock:Class){			// Verify that the lock is the correct class reference.			if (lock != TestModelLock)			{				throw new Error("Invalid TestModel access.  Use TestModel.instance instead.");			} else {				init();			}		}		//*****Initialization Routines				public function init():void{			debug("init()");						initVars();			initEvents();			initObjs();		}				private function initVars():void{			blackoutInterval=20000;			shapingInterval=1000*60*2;	//1000=1 second, so 1000*60*2 = 2 minutes			baselineInterval=1000*60*3;			contrastInterval=1000*60*3;						/*blackoutInterval/=60;			shapingInterval/=60;			baselineInterval/=60;			contrastInterval/=60;*/						_nextphase="wait";			_rewardShowing=false;			_rewardDelaying=false;			_circleProbCoef=0;			_runningcomponent=0;			_runningcomponentcount=2;					}				private function initEvents():void{			appData.eventManager.listen(NAME, onTestModel);			appData.eventManager.listen("sql", onSQL);		}				private function initObjs():void{			//blackout timer			blackoutTimer=new Timer(blackoutInterval,1);			blackoutTimer.addEventListener("timer", onBlackoutTimer);						testTimer=new Timer(shapingInterval, 1);			testTimer.addEventListener("timer", onTestTimer);									//interval objs			intervalArray=new Array(17.98507696,1.05589234,0.340997997,6.938889112,37.080502,2.660184048,12.06038083,3.570531306,8.372359732,1.82588352,5.685613388,23.21755839,4.572204675,10.04682948,14.58709622,4.572204675,1.82588352,23.21755839,3.570531306,12.06038083,6.938889112,8.372359732,1.05589234,2.660184048,0.340997997,37.080502,5.685613388,17.98507696,10.04682948,14.58709622,12.06038083,8.372359732,23.21755839,0.340997997,14.58709622,6.938889112,1.05589234,3.570531306,17.98507696,10.04682948,5.685613388,2.660184048,1.82588352,4.572204675,37.080502,37.080502,4.572204675,5.685613388,2.660184048,8.372359732,23.21755839,10.04682948,17.98507696,3.570531306,1.05589234,6.938889112,12.06038083,1.82588352,0.340997997,14.58709622,5.685613388,23.21755839,8.372359732,17.98507696,1.82588352,14.58709622,12.06038083,10.04682948,0.340997997,37.080502,3.570531306,1.05589234,6.938889112,4.572204675,2.660184048,6.938889112,3.570531306,10.04682948,14.58709622,12.06038083,8.372359732,0.340997997,4.572204675,5.685613388,2.660184048,37.080502,1.82588352,23.21755839,17.98507696,1.05589234,12.06038083,8.372359732,1.82588352,23.21755839,17.98507696,5.685613388,1.05589234,14.58709622,3.570531306,0.340997997,10.04682948,2.660184048,4.572204675,37.080502,6.938889112,6.938889112,1.82588352,5.685613388,0.340997997,12.06038083,8.372359732,2.660184048,17.98507696,3.570531306,23.21755839,4.57,204675,10.04682948,1.05589234,37.080502,14.58709622,12.06038083,1.82588352,6.938889112,14.58709622,4.572204675,0.340997997,37.080502,10.04682948,2.660184048,23.21755839,5.685613388,1.05589234,3.570531306,17.98507696,8.372359732,23.21755839,4.572204675,12.06038083,37.080502,14.58709622,10.04682948,3.570531306,17.98507696,2.660184048,1.82588352,1.05589234,5.685613388,0.340997997,8.372359732,6.938889112,4.572204675,37.080502,10.04682948,5.685613388,23.21755839,8.372359732,17.98507696,1.05589234,1.82588352,12.06038083,0.340997997,6.938889112,14.58709622,2.660184048,3.570531306,23.21755839,10.04682948,14.58709622,1.82588352,2.660184048,12.06038083,4.572204675,37.080502,17.98507696,5.685613388,1.05589234,8.372359732,3.570531306,0.340997997,6.938889112);			resetTmpIntervalArray();			intervalTimer=new Timer(1000,1);			intervalTimer.addEventListener("timer",onIntervalTimer);		}		//*****Core Functionality					private function circleClicked():void{			debug("circleClicked()");						appData.eventManager.dispatch("database", {type:"insertCircleClick", sender:NAME, timestamp:new Date().time.toString()});						debug("_rewardShowing=="+_rewardShowing);			if(!_rewardShowing){				appData.eventManager.dispatch(VIEW, {type:"flashCircle", sender:NAME});			}						if(circleProbability() && !_rewardShowing){								switch(_runningphasename){									case "shaping":						switch(_runningcomponent){							case 0:								showReward();							break;														case 1:								showReward();							break;														case 2:								showReward();							break;						}											break;										case "baseline":						switch(_runningcomponent){							case 0:								showReward();								delayShowReward();							break;														case 1:								showReward();								delayShowReward();							break;						}											break;										case "contrast":						switch(_runningcomponent){							case 0:								showReward();								delayShowReward();							break;														case 1:															break;						}											break;									}											}								}				private function showReward():void{			if(!_rewardDelaying){				appData.eventManager.dispatch(VIEW, {type:"showReward", sender:NAME});				_rewardShowing=true;				_rewardDelaying=false;			}		}				private function delayShowReward():void{			if(!_rewardDelaying){				intervalTimer.reset();				intervalTimer.delay=tmpIntervalArray.shift();				intervalTimer.start();				_rewardDelaying=true;			}		}				private function rewardClicked():void{			debug("rewardClicked()");						appData.eventManager.dispatch("database", {type:"insertRewardClick", sender:NAME, timestamp:new Date().time.toString()});						appData.eventManager.dispatch(VIEW, {type:"collectReward", sender:NAME});			_rewardShowing=false;						appData.incrementReward();		}				private function startTest():void{			debug("startTest()");			if(_nextphase!="wait" && _teststate=="go"){				_runningphasename=_nextphase;				startState();				appData.eventManager.dispatch("view", {type:"showTest", sender:NAME});				appData.eventManager.dispatch(VIEW, {type:"startTest", sender:NAME});				testTimer.start();			} else if (_teststate=="end"){				endTest();			} else {				endTestPhase();			}		}				private function endTest():void{			appData.eventManager.dispatch("view", {type:"endSession", sender:NAME});		}				private function endTestPhase():void{			appData.eventManager.dispatch("view", {type:"showBlackout", sender:NAME});			blackoutTimer.start();		}				private function testStarted():void{			debug("testStarted()");					}				private function testStopped():void{			debug("testStopped()");			endTestPhase();		}				private function updateTestData(obj:Object):void{			debug("updateTestData()");//			debug("nextphase=="+obj.nextphase);						_dbStateObj=obj;			updateDBVars();		}				private function updateDBVars():void{			debug("updateDBVars()");			//_id,_participant,_test,_phase,_nextphase,_component,_componentstart,_teststate						//vars for this class			_id=_dbStateObj.id;			_participant=_dbStateObj.participant;			_test=_dbStateObj.test;			_phase=_dbStateObj.phase;			_nextphase=_dbStateObj.nextphase;			_component=_dbStateObj.component;			_componentstart=_dbStateObj.componentstart;			_teststate=_dbStateObj.teststate;						//database vars			//appData.database.participant=_participant;			appData.database.phase=_runningphasename;			appData.database.component=_runningcomponentname;			appData.database.phaseiteration=_runningcomponentname;		}				private function circleProbability():Boolean{			debug("circleProbability()");						var rand:Number=Math.random();						if(rand>_circleProbCoef){				return true;				debug("true");			} else {				return false;				debug("false");			}		}				private function updateDB():void{			debug("updateDB()");						var vars=new URLVariables();						vars.table="currentTest";			vars.id="1";			vars.phase=_runningphasename;			vars.component=_runningcomponentname;			vars.componentstart=new Date().time.toString();			vars.participant=appData.database.participant;			vars.teststate="go";			vars.test=appData.database.test;			//vars.nextphase="wait";			appData.sqlProxy.truncateSQL(vars, "truncate");						appData.database.component=_runningcomponentname;			appData.database.phase=_runningphasename;						appData.database.insertNewComponent(new Date().time.toString());			//appData.eventManager.dispatch("database", {type:"startPhase", sender:NAME, phase:_runningphasename,component:_runningcomponentname});		}						//*****functions that deal with the current state of the test				private function startState():void{			debug("startState()");			_runningcomponent=0;			changeState();		   debug("_runningcomponent=="+_runningcomponent);		   debug("_runningcomponentcount=="+_runningcomponentcount);		}				private function incrementState():void{			debug("incrementState()");			_runningcomponent++;			if(_runningcomponent<_runningcomponentcount){				changeState();		   } else {			   endTestPhase();		   }		   debug("_runningcomponent=="+_runningcomponent);		   debug("_runningcomponentcount=="+_runningcomponentcount);		}				private function changeState():void{			debug("changeState()");			testTimer.stop();			testTimer.reset();			appData.eventManager.dispatch(VIEW, {type:"hideReward", sender:NAME});			_rewardShowing=false;			_rewardDelaying=false;			resetTmpIntervalArray();			//_runningcomponent++;			intervalTimer.stop();			intervalTimer.reset();						switch(_runningphasename){								case "shaping":					testTimer.delay=shapingInterval;					_runningbkgcolor="yellow";					_runningcomponentcount=3;					switch(_runningcomponent){						case 0:							_circleProbCoef=0;							_runningcomponentname="FR1";						break;												case 1:							_circleProbCoef=.5;							_runningcomponentname="VR2";						break;												case 2:							_circleProbCoef=.75;							_runningcomponentname="VR4";						break;					}									break;								case "baseline":					testTimer.delay=baselineInterval;					_circleProbCoef=0;					_runningcomponentcount=2;					switch(_runningcomponent){						case 0:							_runningbkgcolor="red";							_runningcomponentname="Component 1";						break;																		case 1:							_runningbkgcolor="blue";							_runningcomponentname="Component 2";						break;					}									break;								case "contrast":					testTimer.delay=contrastInterval;					_runningbkgcolor="blue";					_runningcomponentcount=2;					switch(_runningcomponent){						case 0:							_circleProbCoef=0;							_runningbkgcolor="red";							_runningcomponentname="Component 1";						break;												case 1:							_circleProbCoef=1;							_runningbkgcolor="blue";							_runningcomponentname="Component 2";						break;					}									break;							}			debug("_runningbkgcolor=="+_runningbkgcolor);			appData.eventManager.dispatch(VIEW, {type:"setBkg", sender:NAME, color:_runningbkgcolor});			updateDB();			testTimer.start();		}				private function resetTmpIntervalArray():void{			tmpIntervalArray=new Array();			for(var i:uint=0;i<intervalArray.length;i++){				tmpIntervalArray[i]=intervalArray[i]*1000;			}		}		//*****Event Handlers				private function onBlackoutTimer(e:TimerEvent):void{			debug("onBlackoutTimer()");			blackoutTimer.reset();			startTest();		}				private function onTestTimer(e:TimerEvent):void{			debug("onTestTimer()");			//endTestPhase();						appData.database.endCurrentComponent(new Date().time.toString());						incrementState();					}				private function onIntervalTimer(e:TimerEvent):void{			_rewardDelaying=false;			//showReward();		}				private function onSQL(e:MuleEvent):void{			/*debug("onSQL()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){								case RETURNTYPE:									break;							}		}				private function onTestModel(e:MuleEvent):void{			/*debug("onTestModel()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){								case "circleClicked":					circleClicked();				break;								case "rewardClicked":					rewardClicked();				break;								case "testStarted":					testStarted();				break;								case "testStopped":					testStopped();				break;								case "startTest":					startTest();				break;								case "testData":					updateTestData(e.data.testObj);				break;								case "rewardHidden":					_rewardShowing=false;				break;								default:					debug("onTestModel()");					debug("*type not found");					debug("e.data.sender=="+e.data.sender);					debug("e.data.type=="+e.data.type);				break;							}		}				//*****Gets and Sets				public static function get instance():TestModel{return _instance;}				public function get id():String{return _id;}		public function get participant():String{return _participant;}		public function get test():String{return _test;}		public function get phase():String{return _phase;}		public function get nextphase():String{return _nextphase;}		public function get component():String{return _component;}		public function get componentstart():String{return _componentstart;}		public function get teststate():String{return _teststate;}		//*****Utility Functions				//**debug		private function debug(str:String):void{			appData.debug(NAME,str);		}				}//end class}//end packageclass TestModelLock{}