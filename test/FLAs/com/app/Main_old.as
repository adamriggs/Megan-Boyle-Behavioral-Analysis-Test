// com.app.Main// Adam Riggs//package com.app {	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.display.Stage;	import flash.display.StageScaleMode;	import flash.display.StageDisplayState;	import flash.events.*;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.utils.Timer;	import flash.net.URLVariables;		import gs.TweenLite;		import com.adam.utils.AppData;	import com.adam.events.MuleEvent;		import com.app.model.Model;	import com.app.view.View;	import com.app.controller.Controller;		public class Main extends Sprite {				//display objects		//private var test:Test;		private var loginScreen:Login_Screen;		private var bumper:Bumper;		private var testController:TestController;				private var appData:AppData=AppData.instance;				public function Main(){			appData.eventManager.listen("main", onMain);			//appData.eventManager.listen("participant", onParticipant);			//init();		}		//*****Initilization Functions				public function init(){			trace("Main() init");						initVars();			initEvents();			initMVC();			initBumper();			initTestController();			initParticipant();	//login screen		}				private function initVars():void{			stage.scaleMode=StageScaleMode.NO_SCALE;			stage.align="TL";		}				private function initEvents():void{			appData.eventManager.listen("debug", onDebug);			appData.eventManager.listen("keyboard", onKeyboard);			appData.eventManager.listen("sql", onSQL);			stage.addEventListener(FullScreenEvent.FULL_SCREEN, onFullscreenChange);		}				private function initMVC():void{			appData.model=Model.instance;			appData.view=View.instance;			appData.controller=Controller.instance;		}				private function initBumper():void{			bumper=new Bumper();			addChild(bumper);			bumper.visible=false;		}				private function initTestController():void{			testController=new TestController();			addChildAt(testController,0);			testController.visible=false;		}				private function initParticipant():void{			trace("Main.initParticipant()");						loginScreen=new Login_Screen();			loginScreen.x=(appData.main.width-loginScreen.width)/2;			loginScreen.y=(appData.main.height-loginScreen.height)/2;			addChildAt(loginScreen,1);			//updateControlText("loginScreen added");		}		//*****Core Functionality						private function enterFullscreen():void{			trace("enterFullscreen");			stage.displayState=StageDisplayState.FULL_SCREEN;		}				private function exitFullscreen():void{			stage.displayState=StageDisplayState.NORMAL;		}				private function startTest():void{			trace("startTest()");			bumper.visible=false;			//testController.visible=true;						testController.startTest();		}				private function stopTest():void{			trace("stopTest()");			bumper.showStop();		}				private function adminReady():void{			trace("adminReady()");			bumper.showStart();		}				//*****Event Handlers				private function onFullscreenChange(e:FullScreenEvent):void{			appData.stageWidth=stage.stageWidth;			appData.stageHeight=stage.stageHeight;						trace("main");			trace("appData.stageWidth=="+appData.stageWidth);			trace("appData.stageHeight=="+appData.stageHeight);						appData.eventManager.dispatch("bumper", {type:"resize", sender:"main"});			appData.eventManager.dispatch("testController", {type:"resize", sender:"main"});		}				private function onDebug(e:MuleEvent):void{			switch(e.data.type){								case "message":					//updateControlText(e.data.message);				break;							}		}				private function onSQL(e:MuleEvent):void{						switch(e.data.type){								case "insert":					trace("Main.onSQL - insert");					//insertSQL(e.data);				break;								case "query":					trace("Main.onSQL - insert");					//querySQL(e.data);				break;							}		}				private function onMain(e:MuleEvent):void{			trace("Main - onMain()");			switch(e.data.type){								case "init":					init();				break;								case "enterFullscreen":					enterFullscreen();				break;								case "exitFullscreen":					exitFullscreen();				break;								case "loginSuccess":					trace("loginSuccess");					//hide the login screen and bring up black screen with the start button					bumper.visible=true;					loginScreen.visible=false;				break;								case "loginFail":					trace("loginFail");					loginScreen.showFail();				break;								case "startTest":					startTest();				break;								case "stopTest":					stopTest();					break;								case "adminReady":					adminReady();				break;			}		}				private function onKeyboard(e:MuleEvent):void{			//trace("Main.onKeyboard()");			//trace("*e.data.keyboardEvent.keyCode=="+e.data.keyboardEvent.keyCode);			switch(e.data.keyboardEvent.keyCode){								case 16:					//flipControlTextVisible();				break;											}		}				//*****Utility functions				public function show(){			this.visible = true;		}				public function hide(){			this.visible = false;		}				}}