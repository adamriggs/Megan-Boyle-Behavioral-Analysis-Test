// com.app.BumperView// Adam Riggs//package com.app.view {	import flash.display.Sprite;	import flash.events.*;		import gs.TweenMax;		import com.adam.utils.AppData;	import com.adam.events.MuleEvent;	import flash.display.MovieClip;	import flash.display.DisplayObject;	import flash.globalization.CurrencyFormatter;		public class BumperView extends Sprite {				//vars				//objects		private var appData:AppData=AppData.instance;		private var cf:CurrencyFormatter;				//display objects		public var startBtn:MovieClip;		public var endBtn:MovieClip;		public var rectSp:Sprite;				//consts		public const NAME:String="bumperView";		public const RETURNTYPE:String=NAME;		public const CONTROLLER:String="bumperController";				public function BumperView(){						init();		}		//*****Initialization Routines				public function init(){			//this.visible = false;			debug("init()");						initVars();			initEvents();			initObjs();		}				private function initVars():void{					}				private function initEvents():void{			appData.eventManager.listen(NAME, onBumperView);		}				private function initObjs():void{			rectSp=new Sprite();			addChildAt(rectSp,0);						appData.makeButton(startBtn, this);			startBtn.visible=false;						appData.makeButton(endBtn, this);			endBtn.visible=false;						drawRect();			resizeMe();			showStart();						cf=new CurrencyFormatter("en-US");		}		//*****Core Functionality				public function resizeMe():void{			/*debug("appData.stageWidth=="+appData.stageWidth);			debug("appData.stageHeight=="+appData.stageHeight);*/			debug("resizeMe()");			drawRect();			centerDO(startBtn);			centerDO(endBtn);		}				private function drawRect():void{			rectSp.graphics.clear();			rectSp.graphics.beginFill(0x000000,1);			rectSp.graphics.drawRect(0,0,appData.stageWidth,appData.stageHeight);			rectSp.graphics.endFill();		}				private function centerDO(dispObj:DisplayObject):void{			dispObj.x=(appData.stageWidth-dispObj.width)/2;			dispObj.y=(appData.stageHeight-dispObj.height)/2;		}				public function showStart():void{			debug("showStart()");			visible=true;			endBtn.visible=false;			startBtn.visible=true;		}				public function showStop():void{			debug("showStop()");			visible=true;			endBtn.visible=true;			//endBtn.totalRewardTxt.text="$"+appData.totalReward.toString();			endBtn.totalRewardTxt.text=cf.format(appData.totalReward,true);						startBtn.visible=false;		}		//*****Event Handlers				public function onClick(e:MouseEvent):void{			switch(e.currentTarget){								case startBtn:					debug("startBtn");					appData.eventManager.dispatch(CONTROLLER, {type:"startBtnClicked", sender:NAME});				break;								case endBtn:					debug("endBtn");					appData.eventManager.dispatch(CONTROLLER, {type:"endBtnClicked", sender:NAME});				break;							}		}				private function onBumperView(e:MuleEvent):void{			switch(e.data.type){								case "resize":					resizeMe();				break;							}		}		//*****Gets and Sets						//*****Utility Functions				public function show(){			this.visible = true;		}				public function hide(){			this.visible = false;		}				//**debug		private function debug(str:String):void{			appData.debug(NAME,str);		}				}}