// com.app.view.View// Adam Riggs//package com.app.view {	import com.adam.events.MuleEvent;	import com.adam.utils.AppData;	import com.app.view.TestView;	import com.app.view.BumperView;	import com.app.view.LoginScreenView;		import flash.display.Sprite;	import flash.display.DisplayObject;	import flash.display.Stage;	import flash.display.StageScaleMode;	import flash.display.StageDisplayState;	import flash.events.*;		public class View extends Sprite{				//vars		private var doArray:Array;	//array of all the display objects				//objects		private var appData:AppData=AppData.instance;		public var testView:TestView;		public var bumperView:BumperView;		public var loginScreenView:LoginScreenView;		public var blackoutView:BlackoutView;				//const		public const NAME:String="view";		public const RETURNTYPE:String=NAME;				/** Storage for the singleton instance. */		private static const _instance:View = new View(ViewLock);				public function View(lock:Class){			// Verify that the lock is the correct class reference.			if (lock != ViewLock)			{				throw new Error("Invalid View access.  Use View.instance instead.");			} else {				//init();			}		}		//*****Initialization Routines				public function init():void{			debug("init()");						initVars();			initEvents();			initObjs();		}				private function initVars():void{			doArray=new Array();		}				private function initEvents():void{			appData.eventManager.listen(NAME, onView);			appData.eventManager.listen("sql", onSQL);			stage.addEventListener(FullScreenEvent.FULL_SCREEN, onFullscreenChange);		}				private function initObjs():void{			testView=new TestView();			addChild(testView);			doArray.push(testView);						bumperView=new BumperView();			addChild(bumperView);			doArray.push(bumperView);						loginScreenView=new LoginScreenView();			loginScreenView.x=(appData.stageWidth-loginScreenView.width)/2;			loginScreenView.y=(appData.stageHeight-loginScreenView.height)/2;			addChild(loginScreenView);			doArray.push(loginScreenView);						blackoutView=new BlackoutView();			addChild(blackoutView);			doArray.push(blackoutView);						showDO(loginScreenView);			//showDO(blackoutView);		}		//*****Core Functionality						public function startData():void{			//debug("startData()");		}				public function stopData():void{			//debug("stopData()");		}				private function hideAll():void{			debug("hideAll()");			for(var i:uint=0;i<doArray.length;i++){				doArray[i].visible=false;			}		}				private function showDO(dispObj:DisplayObject):void{			hideAll();			dispObj.visible=true;		}				private function enterFullscreen():void{			debug("enterFullscreen()");			stage.displayState=StageDisplayState.FULL_SCREEN;		}				private function exitFullscreen():void{			debug("exitFullScreen()");			stage.displayState=StageDisplayState.NORMAL;		}				private function resizeDOs():void{			for(var i:uint=0;i<doArray.length;i++){				doArray[i].resizeMe();			}		}				private function loginSuccess():void{			showDO(bumperView);		}				private function startTest():void{			debug("startTest()");			showDO(testView);			testView.startTest();		}				private function stopTest():void{			debug("stopTest()");			//showDO(blackoutView);			testView.stopTest();		}				private function endSession():void{			showDO(bumperView);			bumperView.showStop();		}		//*****Event Handlers				private function onFullscreenChange(e:FullScreenEvent):void{			appData.stageWidth=stage.stageWidth;			appData.stageHeight=stage.stageHeight;						//debug(NAME);			debug("appData.stageWidth=="+appData.stageWidth);			debug("appData.stageHeight=="+appData.stageHeight);						resizeDOs();						//appData.eventManager.dispatch("bumper", {type:"resize", sender:NAME});//			appData.eventManager.dispatch("testController", {type:"resize", sender:NAME});		}				private function onSQL(e:MuleEvent):void{			/*debug("onSQL()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){								case RETURNTYPE:									break;							}		}				private function onView(e:MuleEvent):void{			/*debug("onView()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){								case "startData":					startData();				break;								case "stopData":					stopData();				break;								case "enterFullscreen":					enterFullscreen();				break;								case "exitFullscreen":					exitFullscreen();				break;								case "loginSuccess":					loginSuccess();				break;								case "startTest":					startTest();				break;								case "stopTest":					stopTest();				break;								case "showTest":					showDO(testView);				break;								case "showBlackout":					showDO(blackoutView);				break;								case "endSession":					endSession();				break;							}		}				//*****Gets and Sets				public static function get instance():View{return _instance;}		//*****Utility Functions				//**visibility		public function show():void{			this.visible = true;		}				public function hide():void{			this.visible = false;		}				//**debug		private function debug(str:String):void{			appData.debug(NAME,str);		}				}//end class}//end packageclass ViewLock{}