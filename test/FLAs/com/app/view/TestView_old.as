// com.app.TestView// Adam Riggs//package com.app.view{	import flash.display.Sprite;	import flash.events.*;	import flash.utils.Timer;	import flash.net.URLVariables;	import gs.TweenLite;	import com.adam.utils.AppData;	import com.adam.events.MuleEvent;	public class TestView extends Sprite {		private var appData:AppData=AppData.instance;		//background vars		public var testBackground:TestBackground;		//circle vars		public var testCircle:TestCircle;		public var circleTimer:Timer;		private var circleTimerInterval:uint;		private var circleMove:Boolean;		public var circleNumClicks:uint;		public var circleReqClicks:uint;		public var circleProbClick:Number;		public var circleReqTimer:Boolean;		//reward vars		public var testReward:TestReward;		private var rewardTweenTime:Number;		private var rewardTimer:Timer;		private var rewardInterval:uint;		private var rewardHidden:Boolean;		public function TestView() {			init();		}		//*****Initialization Routines		public function init() {			//this.visible = false;			trace("TestView() init");						initEvents();			addEventListener("enterFrame", onEnterFrame);			circleProbClick=0;			initBackground();			initCircle();			initReward();			//circleMove=true;					}				private function initEvents():void{			appData.eventManager.listen("test", onTestView);		}		private function initBackground():void {			trace("TestView.initBackground()");			testBackground=new TestBackground();			addChildAt(testBackground,0);			testBackground.resizeMe();		}		private function initCircle():void {			trace("TestView.initCircle()");			testCircle=new TestCircle();			//testCircle.x=appData.main.width/2;//			testCircle.y=appData.main.height/2;			testCircle.x=appData.stageWidth/2;			testCircle.y=appData.stageHeight/2;			testCircle.speed=10;			testCircle.angle=0.785398163;//45 degrees in radians			testCircle.buttonMode=true;			testCircle.addEventListener(MouseEvent.MOUSE_DOWN, onCircleClick);			addChildAt(testCircle,1);			circleTimerInterval=10000;			//circleTimerInterval/=5;			circleTimer=new Timer(circleTimerInterval,1);			circleTimer.addEventListener("timer", onCircleTimer);			circleMove=new Boolean();			circleMove=false;			circleNumClicks=0;			circleReqClicks=1;			circleReqTimer=false;			//startCircle();		}		private function initReward():void {			trace("TestView.initReward()");			rewardTweenTime=.5;			rewardHidden=true;			testReward=new TestReward();			testReward.addEventListener(MouseEvent.CLICK, onRewardClick);			testReward.buttonMode=true;			testReward.visible=false;			addChildAt(testReward,2);						rewardInterval=5000;			rewardTimer=new Timer(rewardInterval,1);			rewardTimer.addEventListener("timer", onRewardTimer);		}//*****Core Functionality		public function startCircle():void {			//circleTimer.start();			testCircle.visible=true;			circleMove=true;		}		public function stopCircle():void {			//circleTimer.stop();			circleMove=false;			testCircle.visible=false;		}		private function moveCircle():void {			checkBoundaries();			testCircle.moveCircle();		}		private function checkBoundaries():void {			var outOfBounds:Boolean=false;			if ((testCircle.x-testCircle.circleRad)<0) {				//trace("left wall");				outOfBounds=true;				testCircle.newYSign*=-1;				testCircle.speed*=-1;				testCircle.x=testCircle.circleRad+1;			}			if ((testCircle.x+testCircle.circleRad)>appData.stageWidth) {				//trace("right wall");				outOfBounds=true;				testCircle.newYSign*=-1;				testCircle.speed*=-1;				testCircle.x=appData.stageWidth-testCircle.circleRad-1;			}			if ((testCircle.y-testCircle.circleRad)<0) {				//trace("top wall");				outOfBounds=true;				testCircle.newXSign*=-1;				testCircle.speed*=-1;				testCircle.y=testCircle.circleRad+1;			}			if ((testCircle.y+testCircle.circleRad)>appData.stageHeight) {				//trace("bottom wall");				outOfBounds=true;				testCircle.newXSign*=-1;				testCircle.speed*=-1;				testCircle.y=appData.stageHeight-testCircle.circleRad-1;			}			if (outOfBounds) {				testCircle.angleMutate();			}		}		private function showReward():void {			rewardHidden=false;			/*testReward.x=appData.main.width-testReward.width-5;			testReward.y=10;			testReward.alpha=1;			testReward.visible=true;*/			testReward.show();			testCircle.flashing=false;			var msg:String="*show reward";			//appData.eventManager.dispatch("debug", {type:"message", message:msg});						appData.eventManager.dispatch("sql", {type:"insert", table:"test", event:"reward delivered", timestamp:new Date().time.toString()});			rewardTimer.start();		}		public function hideReward():void {			rewardHidden=true;			testReward.hide();			//TweenLite.to(testReward, rewardTweenTime,{x:0, alpha:0});						//var msg:String="*hide reward";			//appData.eventManager.dispatch("debug", {type:"message", message:msg});			testCircle.flashing=true;			//appData.eventManager.dispatch("sql", {type:"insert", table:"test", event:"reward delivered", timestamp:new Date().time.toString()});		}				private function circleProbability():Boolean{			var rand:Number=Math.random();			trace("rand=="+rand+", circleProbClick=="+circleProbClick);			trace("rand>=circleProbClick=="+(rand>=circleProbClick).toString());			if(rand>=circleProbClick){return true;} else {return false;}		}//*****Event Handlers				private function onTestView(e:MuleEvent):void{			switch(e.data.type){											}		}				private function onEnterFrame(e:Event):void {			if (circleMove) {				moveCircle();			}		}		private function onCircleTimer(e:Event):void {			//moveCircle();			trace("TestView.onCircleTimer()");			//showReward();			circleTimer.stop();		}		private function onCircleClick(e:MouseEvent):void {			trace("TestView.onCircleClick()");			var msg:String;			msg="*stimulus clicked";			if (! rewardHidden) {				msg+="\n **reward is already available but not yet clicked";			}			circleNumClicks+=1;			//if(circleNumClicks==circleReqClicks){			if(circleProbability()){				circleNumClicks=0;				if(circleReqTimer){					if (!circleTimer.running) {						showReward();						circleTimer.start();						trace("TestView.circleTimer.start()");					}									} else {					showReward();				}			}			appData.eventManager.dispatch("debug", {type:"message", message:msg});			//appData.eventManager.dispatch("sql", {type:"insert", table:"test", event:"circle clicked", timestamp:new Date().time.toString()});			appData.eventManager.dispatch("database", {type:"insertCircleClick", sender:"test", timestamp:new Date().time.toString()});		}		private function onRewardClick(e:MouseEvent):void {			var msg:String;			msg="*reward clicked";			hideReward();			rewardTimer.reset();			appData.incrementReward();			appData.eventManager.dispatch("debug", {type:"message", message:msg});			//appData.eventManager.dispatch("sql", {type:"insert", table:"test", event:"reward clicked", timestamp:new Date().time.toString()});			appData.eventManager.dispatch("database", {type:"insertRewardClick", sender:"test", timestamp:new Date().time.toString()});		}				private function onRewardTimer(e:TimerEvent):void{			rewardTimer.stop();			testReward.visible=false;			rewardHidden=true;			testCircle.flashing=true;		}		//*****Gets and Sets		//*****Utility Functions		public function show() {			this.visible=true;		}		public function hide() {			this.visible=false;		}	}}