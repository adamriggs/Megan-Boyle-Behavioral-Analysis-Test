// com.app.view.TestView// Adam Riggs//package com.app.view{	import com.adam.events.MuleEvent;	import com.adam.utils.AppData;		import flash.display.Sprite;	import flash.events.*;	import com.app.view.TestBackground;	import com.app.view.TestCircle;	import com.app.view.TestReward;		public class TestView extends Sprite {				//vars				//objects		private var appData:AppData=AppData.instance;				//display objects		private var bkg:TestBackground;		private var circle:TestCircle;		private var reward:TestReward;				//const		public const NAME:String="testView";		public const RETURNTYPE:String=NAME;		public const CONTROLLER:String="testController";				public function TestView(){						init();		}		//*****Initialization Routines				public function init():void{			debug("init()");						initVars();			initEvents();			initObjs();		}				private function initVars():void{					}				private function initEvents():void{			appData.eventManager.listen(NAME, onTestView);			appData.eventManager.listen("sql", onSQL);		}				private function initObjs():void{			bkg=new TestBackground();			circle=new TestCircle();			reward=new TestReward();						addChild(bkg);			addChild(circle);			addChild(reward);						reward.visible=false;			resizeMe();		}		//*****Core Functionality				public function startTest():void{			debug("startTest()");			addClickable();			addEventListener(Event.ENTER_FRAME, onEnterFrame);			appData.eventManager.dispatch(CONTROLLER, {type:"testStarted", sender:NAME});		}				public function stopTest():void{			debug("stopTest()");			removeClickable();			removeEventListener(Event.ENTER_FRAME, onEnterFrame);			centerCircle();			appData.eventManager.dispatch(CONTROLLER, {type:"testStopped", sender:NAME});		}				public function resizeMe():void{			centerCircle();			bkg.resizeMe();		}				private function addClickable():void{			circle.buttonMode=true;			reward.buttonMode=true;						circle.addEventListener(MouseEvent.MOUSE_DOWN, onClick);			reward.addEventListener(MouseEvent.MOUSE_DOWN, onClick);		}				private function removeClickable():void{			circle.buttonMode=false;			reward.buttonMode=false;						circle.removeEventListener(MouseEvent.MOUSE_DOWN, onClick);			reward.removeEventListener(MouseEvent.MOUSE_DOWN, onClick);		}						//**circle functions		private function centerCircle():void{			circle.x=appData.stageWidth/2;			circle.y=appData.stageHeight/2;		}				private function circleClicked():void{			appData.eventManager.dispatch(CONTROLLER, {type:"circleClicked", sender:NAME});		}				private function flashCircle():void{			circle.flash();		}				//**reward functions		private function showReward():void{			debug("showReward()");			reward.show();		}				private function hideReward():void{			debug("hideReward");			reward.hide();		}				private function collectReward():void{			debug("collectReward");			reward.collect();		}				private function rewardClicked():void{			appData.eventManager.dispatch(CONTROLLER, {type:"rewardClicked", sender:NAME});			//collectReward();		}				//**background functions		private function changeBkgColor(color:String):void{			switch(color){								case "red":					bkg.showRed();				break;								case "blue":					bkg.showBlue();				break;								case "yellow":					bkg.showYellow();				break;							}		}				private function setBkg(color:String):void{			debug("setBkg() color=="+color);			changeBkgColor(color);		}		//*****Event Handlers				private function onEnterFrame(e:Event):void{			circle.moveCircle();		}				private function onClick(e:MouseEvent):void{			switch(e.currentTarget){				case circle:					circleClicked();				break;								case reward:					rewardClicked();				break;			}		}				private function onSQL(e:MuleEvent):void{			/*debug("onSQL()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){								case RETURNTYPE:									break;							}		}				private function onTestView(e:MuleEvent):void{			/*debug("onTestView()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){								case "startTest":					startTest();				break;								case "stopTest":					stopTest();				break;								case "showReward":					showReward();				break;								case "hideReward":					hideReward();				break;								case "collectReward":					collectReward();				break;								case "changeBkgColor":					changeBkgColor(e.data.color.toString());				break;								case "flashCircle":					flashCircle();				break;								case "setBkg":					debug("e.data.color=="+e.data.color);					setBkg(e.data.color);				break;								default:					debug("onTestView()");					debug("*type not found");					debug("e.data.sender=="+e.data.sender);					debug("e.data.type=="+e.data.type);				break;							}		}				//*****Gets and Sets						//*****Utility Functions				//**visibility		public function show():void{			this.visible = true;		}				public function hide():void{			this.visible = false;		}				//**debug		private function debug(str:String):void{			appData.debug(NAME,str);		}				}//end class}//end package