// com.app.AppData// Adam Riggs//package com.adam.utils{		import flash.xml.*	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.*;		import com.adam.events.EventManager;	//import com.adam.apis.Flickr;	//import com.adam.db.SQLProxy;	import com.app.model.Model;	import com.app.view.View;	import com.app.controller.Controller;	import com.app.controller.SQLProxy;	import fl.controls.progressBarClasses.IndeterminateBar;		public class AppData{				//global vars		public var mainXML:XML;		public var playerType:String;		public var buildType:String;		public var isLocal:Boolean;				//coordinates of display objects		public var ctsvX:int;		public var ctsvY:int;		public var ctdvX:int;		public var ctdvY:int;		public var panelY:int;		public var panelDgY:int;				//interval variables		var circleClicked:int;		var rewardClicked:int;		var rewardDelivered:int;		private var circleClickedTotal,rewardClickedTotal,rewardDeliveredTotal:uint;		var newComponent:Boolean;		var endComponent:Boolean;				//various parameters		public var intervalSize:int;				//global objects		public var flashVars:Object;		public var bandwidth:Object;		public var main:Object;		public var shell:Sprite;		public var eventManager:EventManager;		public var sqlProxy:SQLProxy;				//mvc		public var model:Model;		public var view:View;		public var controller:Controller;				public const NAME:String="appData";				/** Storage for the singleton instance. */		private static const _instance:AppData = new AppData(AppDataLock);				public function AppData(lock:Class){			trace("AppData()");						// Verify that the lock is the correct class reference.			if ( lock != AppDataLock )			{				throw new Error( "Invalid AppData access.  Use AppData.instance instead." );			} else {				init();			}		}		//*****Initialization functions				public function init():void{			trace("AppData.init()");						initVars();		}				private function initVars():void{			//currentTestStateView			ctsvX=20;			ctsvY=20;						//currentTestDataView			//ctdvX=550;			ctdvX=620;			ctdvY=20;						//panels			panelY=20;			panelDgY=30;						//current test data model			intervalSize=10*1000;						newComponent=false;			endComponent=false;		}		//*****Core functionality				public function listObject(obj:Object):void{			for (var item in obj) {				trace(item+"=="+obj[item]);			}		}				public function makeButton(mc:MovieClip, obj:Object):void{			mc.buttonMode=true;			mc.addEventListener(MouseEvent.CLICK, obj.onClick);		}				public function makeHoverButton(mc:MovieClip, obj):void{			mc.buttonMode=true;			mc.mouseChildren=false;			mc.overBtn.visible=false;			mc.addEventListener(MouseEvent.CLICK, obj.onClick);			mc.addEventListener(MouseEvent.MOUSE_OVER, onOver);			mc.addEventListener(MouseEvent.MOUSE_OUT, onOut);		}				public function toLocalTime(num:Number):String{			var date=new Date(num);			return date.toLocaleTimeString();		}				public function toLocalDate(num:Number):String{			var date=new Date(num);			return date.toLocaleDateString();		}				/*public function setCmb(cmb:ComboBox, val:String):void{			for(var i:uint=0;i<phaseArray.length;i++){				//var tmp:String=;				if(cmb.getItemAt(i).data.toString()==val){					cmb.selectedItem=cmb.getItemAt(i);					break;				} else {					for(var item in cmb.getItemAt(i)){						//trace(item + "==" + cmb.getItemAt(i)[item]);					}				}			}		}*/				public function makeInterval(arr:Array):Array{			var iArr:Array=new Array();	//interval array			var iStart:Number;			var iEnd:Number;			var iCount:uint=1;			var prevComponent:String;			var prevPhase:String;						iStart=arr[0].timestamp;			iEnd=iStart+intervalSize;			circleClicked=rewardClicked=rewardDelivered=0;			circleClickedTotal=rewardClickedTotal=rewardDeliveredTotal=0;			/*prevComponent=arr[0].component;			prevPhase=arr[0].phase;*/						//debug(NAME,"starting iEnd=="+iEnd);						for(var i:uint=0;i<arr.length;i++){												if(arr[i].event=="end component"){					//debug(NAME,"end component");										iArr.push({phase:arr[i].phase,phaseiteration:arr[i].phaseiteration,component:arr[i].component,clicks:0,deliveries:0,consumption:0,newComponent:false,endComponent:true});										iArr.push({phase:arr[i].phase,phaseiteration:arr[i].phaseiteration,component:arr[i].component,clicks:circleClicked,deliveries:rewardDelivered,consumption:rewardClicked,newComponent:newComponent,endComponent:endComponent});					circleClicked=rewardClicked=rewardDelivered=0;														}  else if(arr[i].event=="new component"){					//debug(NAME,"new component");					iArr.push({phase:arr[i].phase,phaseiteration:arr[i].phaseiteration,component:arr[i].component,clicks:0,deliveries:0,consumption:0,newComponent:true,endComponent:false});					iEnd=Number(arr[i].timestamp)+intervalSize;					//debug(NAME,"iEnd=="+iEnd);									} else {										incrementCounters(arr[i].event);										while(arr[i].timestamp>iEnd/* && !endComponent*/){						//debug(NAME,"push interval");						iArr.push({phase:arr[i].phase,phaseiteration:arr[i].phaseiteration,component:arr[i].component,clicks:circleClicked,deliveries:rewardDelivered,consumption:rewardClicked,newComponent:newComponent,endComponent:endComponent});						circleClicked=rewardClicked=rewardDelivered=0;						iEnd=iEnd+intervalSize;						//debug(NAME,"iEnd=="+iEnd);					}				}							}						//iArr.push({phase:arr[arr.length-1].phase,phaseiteration:arr[arr.length-1].phaseiteration,component:arr[arr.length-1].component,clicks:circleClicked,deliveries:rewardDelivered,consumption:rewardClicked,newComponent:newComponent,endComponent:endComponent});						/*debug(NAME,"circleClickedTotal=="+circleClickedTotal);			debug(NAME,"rewardClickedTotal=="+rewardClickedTotal);*/			//debug(NAME,"rewardDeliveredTotal=="+rewardDeliveredTotal);						return iArr;		}				private function incrementCounters(str:String):void{			//debug(NAME, "incrementCounters str=="+str);			switch(str){				case "circle clicked":					//debug("circle clicked");					circleClicked++;					circleClickedTotal++;				break;								case "reward clicked":					//debug("reward clicked");					rewardClicked++;					rewardClickedTotal++;				break;								case "reward delivered":					//debug("reward delivered");					rewardDelivered++;					//rewardDeliveredTotal++;				break;								default:					//debug("*unknown event - str=="+str, "appData");				break;			}		}				public function xmlToArray(xml:XML, arr:Array):void{			//debug("xmlToArray()");						//debug("xml.RESULT.ROW.length()=="+xml.RESULT.ROW.length());						for(var i:uint=0;i<xml.RESULT.ROW.length();i++){				arr[i]=new Object();				arr[i].id=xml.RESULT.ROW[i].ID.toString();				arr[i].participant=xml.RESULT.ROW[i].PARTICIPANT.toString();				arr[i].test=xml.RESULT.ROW[i].TEST.toString();				arr[i].event=xml.RESULT.ROW[i].EVENT.toString();				arr[i].timestamp=xml.RESULT.ROW[i].TIMESTAMP.toString();				arr[i].phase=xml.RESULT.ROW[i].PHASE.toString();				arr[i].component=xml.RESULT.ROW[i].COMPONENT.toString();				arr[i].phaseiteration=xml.RESULT.ROW[i].PHASEITERATION.toString();			}						//debug("arr.length=="+arr.length);					}				public function debug(objName:String, str:String):void{			trace(objName+": "+str);			//eventManager.dispatch("debug", {msg:str, sender:objName});		}		//*****Event Handlers				private function onOver(e:MouseEvent):void{			e.currentTarget.overBtn.visible=true;		}				private function onOut(e:MouseEvent):void{			e.currentTarget.overBtn.visible=false;		}		//*****Gets and sets				public static function get instance():AppData		{			return _instance;		}			}}class AppDataLock{} 