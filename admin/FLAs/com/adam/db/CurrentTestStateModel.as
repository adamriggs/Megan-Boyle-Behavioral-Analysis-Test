// com.adam.db.CurrentTestStateModel// Adam Riggs//package com.adam.db{	import com.adam.events.MuleEvent;	import com.adam.utils.AppData;		import flash.display.Sprite;	import flash.events.*;	import flash.utils.Timer;	import flash.net.URLVariables;		public class CurrentTestStateModel {				private var appData:AppData=AppData.instance;				//vars		private var _xml:XML;		private var _participant,_test,_phase,_nextphase,_component,_componentstart,_teststate:String;		private var _urlVars:URLVariables;		private var _dataInterval:Number;				//objects		private var dataTimer:Timer;				//const		public const TABLE:String="currentTest";		public const COLUMNS:String="participant, test, phase, nextphase, component, componentstart, teststate";		public const NAME:String="currentTestStateModel";		public const RETURNTYPE:String=NAME;						//instance		private static const _instance:CurrentTestStateModel = new CurrentTestStateModel(CurrentTestStateModelLock);				public function CurrentTestStateModel(lock:Class){			// Verify that the lock is the correct class reference.			if (lock != CurrentTestStateModelLock)			{				throw new Error("Invalid CurrentTestStateModel access.  Use CurrentTestStateModel.instance instead.");			} else {				init();			}		}		//*****Initialization Routines				public function init():void{			debug("init()");						initVars();			initEvents();			initTimer();		}				private function initVars():void{			//local instances of other vars			_dataInterval=appData.database.dataTimerInterval;						//local vars			_xml=new XML();		}				private function initEvents():void{			appData.eventManager.listen(NAME, onCurrentTestStateModel);			appData.eventManager.listen("sql", onSQL);		}				private function initURLVariables():void{			_urlVars=new URLVariables();			_urlVars.table=TABLE;			_urlVars.columns=COLUMNS;		}				private function initTimer():void{			dataTimer=new Timer(_dataInterval);			dataTimer.addEventListener(TimerEvent.TIMER,onDataTimer);		}		//*****Core Functionality				public function startData():void{			dataTimer.start();		}				public function stopData():void{			dataTimer.stop();			dataTimer.reset();		}				private function processData(rawData:String):void{			_xml=new XML(rawData);			debug("xml: "+_xml);						_participant=_xml.RESULT.ROW.PARTICIPANT;			_test=_xml.RESULT.ROW.TEST;			_phase=_xml.RESULT.ROW.PHASE;			_nextphase=_xml.RESULT.ROW.NEXTPHASE;			_component=_xml.RESULT.ROW.COMPONENT;			_componentstart=_xml.RESULT.ROW.COMPONENTSTART;			_teststate=_xml.RESULT.ROW.TESTSTATE;						//send an event saying that the data has been updated to the view			appData.eventManager.dispatch("currentTestStateView", {type:"update", sender:NAME});					}		//*****Event Handlers				private function onDataTimer(e:TimerEvent):void{			appData.eventManager.dispatch("sqlProxy", {type:"selectSQL", sender:NAME, vars:_urlVars, returnType:RETURNTYPE});		}				private function onSQL(e:MuleEvent):void{			/*debug("onSQL()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){								case RETURNTYPE:					try{						processData(e.data.result);					}catch(e:Error){						debug("error processing sql result data");						debug(e.data.result);					}				break;							}		}				private function onCurrentTestStateModel(e:MuleEvent):void{			/*debug("onCurrentTestStateModel()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){								case "startData":					startData();				break;								case "stopData":					stopData();				break;							}		}				//*****Gets and Sets				public static function get instance():CurrentTestStateModel{return _instance;}				public function get xml():XML{return _xml;}		public function get participant():XML{return _participant;}		public function get test():XML{return _test;}		public function get phase():XML{return _phase;}		public function get nextphase():XML{return _nextphase;}		public function get component():XML{return _component;}		public function get componentstart():XML{return _componentstart;}		public function get teststate():XML{return _teststate;}		public function get urlVars():XML{return _urlVars;}		//*****Utility Functions						//**debug		private function debug(str:String):void{			appData.debug(NAME,str);		}				}//end class}//end packageclass CurrentTestStateModelLock{}