// com.adam.db.TestDataModel// Adam Riggs//package com.adam.db{	import com.adam.events.MuleEvent;	import com.adam.utils.AppData;		import flash.display.Sprite;	import flash.events.*;	import flash.net.URLVariables;		public class TestDataModel {				private var appData:AppData=AppData.instance;				//data		private var _xml:XML;		private var _obj:Object;				//timer		private var dataTimer:Timer;		private var dataInterval:Number;				//vars		private var returnType:String;		private var urlVars:URLVariables;				//instance		private static const _instance:TestDataModel = new TestDataModel(TestDataModelLock);				public function TestDataModel(lock:Class){			// Verify that the lock is the correct class reference.			if (lock != TestDataModelLock)			{				throw new Error("Invalid TestDataModel access.  Use TestDataModel.instance instead.");			} else {				init();			}		}		//*****Initialization Routines				public function init():void{			//this.visible = false;			debug("TestDataModel() init");						initVars();			initEvents();			initURLVariables();			initTimer();		}				private function initVars():void{			//local instances of other vars						//local vars			returnType="testDataModel";			_xml=new XML();			_obj=new Object();		}				private function initEvents():void{			appData.eventManager.listen("testDataModel", onTestDataModel);			appData.eventManager.listen("sql", onSQL);		}				private function initURLVariables():void{			urlVars=new URLVariables();					}				private function initTimer():void{			dataInterval=appData.database.dataTimerInterval;			dataTimer=new Timer(dataInterval);			dataTimer.addEventListener(TimerEvent.TIMER,onDataTimer);		}		//*****Core Functionality				public function startData():void{			dataTimer.start();		}				private function stopData():void{			dataTimer.stop();			dataTimer.reset();		}				private function processData():void{			_xml=new XML(rawData);			_obj=new Object();					}		//*****Event Handlers				private function onDataTimer(e:TimerEvent):void{			appData.eventManager.dispatch("sqlProxy", {type:"selectSQL", sender:"testDataModel", vars:urlVars, returnType:returnType});		}				private function onSQL(e:MuleEvent):void{			/*debug("onSQL()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){								case returnType:					try{						processData(e.data.result);					}catch(e:Error){						debug("error processing sql result data");						debug(e.data.result);					}				break;							}		}				private function onTestDataModel(e:MuleEvent):void{			/*debug("onTestDataModel()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){															}		}				//*****Gets and Sets				public static function get instance():TestDataModel{return _instance;}				public function get xml():XML{return _xml;}		public function get obj():Object{return _obj;}		//*****Utility Functions						//**debug		private function debug(str:String):void{			trace("TestDatasModel:"+str);			appData.eventManager.dispatch("debug", {msg:str, sender:"TestDataModel"});		}				}//end class}//end packageclass TestDataModelLock{}