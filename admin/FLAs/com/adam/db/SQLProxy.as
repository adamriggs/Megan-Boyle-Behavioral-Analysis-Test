// com.app.SQLProxy// Adam Riggs//package com.adam.db {	import flash.display.Sprite;	import flash.events.*;	import flash.net.URLVariables;		//import gs.TweenMax;		import com.adam.utils.AppData;	import com.adam.events.MuleEvent;		public class SQLProxy extends Sprite {				private var appData:AppData=AppData.instance;				private var _baseURL,_insertURL,_updateURL,_deleteURL, _selectURL:String;				private var _sqlLoaderArray:Array;				private var _check:Boolean;				private static const _instance:SQLProxy=new SQLProxy(SQLProxyLock);				public function SQLProxy(lock:Class){			if ( lock != SQLProxyLock )			{				throw new Error( "Invalid SQLProxy access.  Use SQLProxy.instance." );			}			//init();		}		//*****Initialization Routines				public function init(){			//this.visible = false;			trace("SQLProxy() init");									initVars();			initEvents();			initSQLLoaderArray();		}				private function initVars():void{			_baseURL="http://adamriggs.com/clients/megan/db/";			_insertURL=baseURL+"insert.php";			_updateURL=baseURL+"update.php";			_deleteURL=baseURL+"delete.php";			_selectURL=baseURL+"select.php";		}				private function initEvents():void{			appData.eventManager.listen("sqlProxy", onSQLProxy);		}				private function initSQLLoaderArray():void{			_sqlLoaderArray=new Array();		}		//*****Core Functionality				public function insertSQL(vars:URLVariables,t:String="sqlResult"):void{			_sqlLoaderArray.push(new SQLLoader(_insertURL, vars, t));		}				public function updateSQL(vars:URLVariables,t:String="sqlResult"):void{			_sqlLoaderArray.push(new SQLLoader(_updateURL, vars, t));		}				public function deleteSQL(vars:URLVariables,t:String="sqlResult"):void{			_sqlLoaderArray.push(new SQLLoader(_deleteURL, vars, t));		}				public function selectSQL(vars:URLVariables,t:String="sqlResult"):void{			_sqlLoaderArray.push(new SQLLoader(_selectURL, vars, t));		}				public function checkArrayForErrors():Boolean{			var _check:Boolean=false;						for(var i:uint=0;i<_sqlLoaderArray.length;i++){				if(_sqlLoaderArray[i].error==true){_check=true;}			}						return _check;		}				public function checkArrayStillWorking():Boolean{			var _check:Boolean=false;						for(var i:uint=0;i<_sqlLoaderArray.length;i++){				if(_sqlLoaderArray[i].working==true){_check=true;}			}						return _check;		}				public function checkArrayEverythingDone():Boolean{			var _check:Boolean=true;						for(var i:uint=0;i<_sqlLoaderArray.length;i++){				if(_sqlLoaderArray[i].success==false){_check=false;}			}						return _check;		}		//*****Event Handlers				private function onSQLProxy(e:MuleEvent):void{			/*debug("onSQLProxy()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){								case "selectSQL":					selectSQL(e.data.vars,e.data.returnType);				break;							}		}		//*****Gets and Sets				public function get baseURL():String{return _baseURL;}		public function set baseURL(value:String):void{_baseURL=value;}				public function get insertURL():String{return _insertURL;}		public function set insertURL(value:String):void{_insertURL=value;}				public function get updateURL():String{return _updateURL;}		public function set updateURL(value:String):void{_updateURL=value;}				public function get deleteURL():String{return _deleteURL;}		public function set deleteURL(value:String):void{_deleteURL=value;}				public function get selectURL():String{return _selectURL;}		public function set selectURL(value:String):void{_selectURL=value;}				public function get sqlLoaderArray():Array{return _sqlLoaderArray;}				public static function get instance():SQLProxy{return _instance;}		//*****Utility Functions				public function show(){			this.visible = true;		}				public function hide(){			this.visible = false;		}				}}class SQLProxyLock{}