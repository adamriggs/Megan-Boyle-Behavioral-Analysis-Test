// com.app.Main// Adam Riggs//package com.app {	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.events.*;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.utils.Timer;	import flash.net.URLVariables;		import fl.controls.List;	import fl.controls.DataGrid;		import gs.TweenLite;		import com.adam.utils.AppData;	import com.adam.events.MuleEvent;		import com.app.model.Model;	import com.app.view.View;	import com.app.controller.Controller;		public class Main extends Sprite {						private var appData:AppData=AppData.instance;				//debug window		private var controlText:TextField;				//url vars		private var vars:URLVariables;				//UI components		/*public var participants_lb, tests_lb:List;		public var data_dg:DataGrid;*/				//data grid column names		private var phaseCol,iterationCol,componentCol,intervalCol,clicksCol,deliveriesCol,consumptionsCol:String;		private var colNameArray:Array;				//testData		private var testData:TestData;				public function Main(){			appData.eventManager.listen("main", onMain);			//init();		}		//*****Initilization Functions				public function init(){			trace("Main() init");						initVars();			initEvents();			initControlDisplay();			//initParticipants_lb();			//initTests_lb();			//initData_dg();			//selectSQL({keyword:"DISTINCT", table:"participant", columns:"participant", where:"", order:"participant ASC"}, "participants");			initMVC();			appData.eventManager.dispatch("view", {type:"startData", sender:"main"});		}				private function initVars():void{			//column names			phaseCol="Phase";			iterationCol="Iteration";			componentCol="Component";			intervalCol="Interval";			clicksCol="# of clicks";			deliveriesCol="# of SR deliveries";			consumptionsCol="# of SR consumptions";			colNameArray=new Array(phaseCol,iterationCol,componentCol,intervalCol,clicksCol,deliveriesCol,consumptionsCol);						//testData			//testData=new TestData();		}				private function initEvents():void{			appData.eventManager.listen("debug", onDebug);			appData.eventManager.listen("keyboard", onKeyboard);			appData.eventManager.listen("sql", onSQL);		}				private function initControlDisplay():void{			trace("Main.initControlDisplay()");			controlText=new TextField();			controlText.alpha=.9;			controlText.width=300;			controlText.height=appData.main.height;			controlText.background=true;			controlText.border=true;			controlText.visible=false;			updateControlText("initControlDisplay()");			addChildAt(controlText,0);		}				private function initParticipants_lb():void{			//participants_lb.addEventListener(Event.CHANGE, onParticipantsChange);		}				private function initTests_lb():void{			//tests_lb.addEventListener(Event.CHANGE, onTestsChange);		}				private function initData_dg():void{			//data_dg.columns=colNameArray;		}				private function initMVC():void{			appData.model=Model.instance;			appData.model.init();			appData.controller=Controller.instance;			appData.controller.init();			appData.view=View.instance;			addChild(appData.view);			appData.view.init();		}		//*****Core Functionality				private function updateControlText(msg:String):void{			//msg=msg+"\n";			//controlText.text+=msg;			//msg+="\n **timestamp:"+new Date().time;			controlText.appendText(msg);			controlText.appendText("\n **timestamp:"+new Date().time+"\n");			controlText.scrollV=controlText.numLines;		}				private function flipControlTextVisible():void{			trace("Main.flipControlTextVisibile()");			trace("*controlText.visible=="+controlText.visible);			if(controlText.visible){				controlText.visible=false;			} else {				controlText.visible=true;			}		}				private function insertSQL(data:Object):void{					}				private function selectSQL(data:Object,t:String="sqlResult"):void{			vars=new URLVariables();						vars.keyword=data.keyword;			vars.table=data.table;			vars.columns=data.columns;			if(data.where){vars.where=data.where;}			if(data.order){vars.order=data.order;}						appData.controller.sql.selectSQL(vars, t);		}				private function updateParticipants(xml:XML):void{			//create the list of participants			//trace("updateParticipants.xml=="+xml);			var i:uint;						for(i=0;i<xml.RESULT.ROW.length(); i++){				//participants_lb.addItem({label:xml.RESULT.ROW[i].PARTICIPANT.toString(), data:xml.RESULT.ROW[i].PARTICIPANT.toString()});			}		}				private function updateTests(xml:XML):void{			//update the list of tests for the selected participant			//trace("updateTests.xml=="+xml);			var i:uint;						//tests_lb.removeAll();			//data_dg.removeAll();						for(i=0;i<xml.RESULT.ROW.length(); i++){				//tests_lb.addItem({label:new Date(xml.RESULT.ROW[i].TEST).toLocaleString(), data:xml.RESULT.ROW[i].TEST.toString()});			}		}				/*private function updateData(xml:XML):void{			trace("updateData.xml=="+xml);						data_dg.removeAll();						for(var i:uint=0; i<xml.RESULT.ROW.length();i++){				data_dg.addItem({action:xml.RESULT.ROW[i].EVENT.toString(), time:new Date(xml.RESULT.ROW[i].TIMESTAMP).toLocaleTimeString()});			}					}*/				private function updateData(intervalArray:Array):void{			//update the datagrid that holds all of the test data			//data_dg.removeAll();						for(var i:uint=0; i<intervalArray.length;i++){				//data_dg.addItem({"Phase":intervalArray[i].phase,"Iteration":intervalArray[i].phaseiteration,"Component":intervalArray[i].component,"Interval":i+1, "# of clicks":intervalArray[i].clicks, "# of SR deliveries":intervalArray[i].deliveries, "# of SR consumptions":intervalArray[i].consumption});			}		}				//*****Event Handlers				private function onDebug(e:MuleEvent):void{			switch(e.data.type){								case "message":					updateControlText(e.data.message);				break;							}		}				private function onParticipantsChange(e:Event):void{			var part:String=e.target.selectedItem.data;			selectSQL({keyword:"", table:"participant", columns:"test", where:"participant='"+part+"'"}, "tests");		}				private function onTestsChange(e:Event):void{			var test:String=e.target.selectedItem.data;			//selectSQL({keyword:"", table:"test", columns:"event,timestamp", where:"test='"+test+"'"}, "data");						testData.getTestData(test);						//code for interaction with TestData, comment out the selectSQL line					}				private function onSQL(e:MuleEvent):void{			//trace("e.data.type=="+e.data.type);			switch(e.data.type){								case "insert":					insertSQL(e.data);				break;								case "select":					selectSQL(e.data);				break;								case "sqlResult":					//trace("sqlResult==");					//trace(new XML(e.data.result));				break;								case "participants":					//trace(new XML(e.data.result));					updateParticipants(new XML(e.data.result));				break;								case "tests":					//trace(new XML(e.data.result));					updateTests(new XML(e.data.result));				break;								case "data":					//trace(new XML(e.data.result));					//updateData(new XML(e.data.result));				break;							}		}				private function onMain(e:MuleEvent):void{			switch(e.data.type){								case "init":					init();				break;								case "intervalData":					updateData(e.data.array);				break;			}		}				private function onKeyboard(e:MuleEvent):void{			trace("Main.onKeyboard()");			trace("*e.data.keyboardEvent.keyCode=="+e.data.keyboardEvent.keyCode);			switch(e.data.keyboardEvent.keyCode){								case 16:					flipControlTextVisible();				break;											}		}		}//*****End Class Definition}//*****End Package Definition