// com.app.CurrentTest// Adam Riggs//package com.app {	import flash.display.Sprite;	import flash.events.*;		import gs.TweenMax;		import com.adam.utils.AppData;	import com.adam.events.MuleEvent;	import flash.text.TextField;	import flash.net.URLVariables;	import fl.controls.ComboBox;	import fl.data.DataProvider;	import flash.utils.Timer;		public class CurrentTest extends Sprite {				private var appData:AppData=AppData.instance;				//stage objects		public var participantTxt,phaseTxt,componentTxt,componentStartTxt,testStartTxt:TextField;		public var refreshBtn:MyButton;		public var phaseCmb,/*componentCmb,*/testCmb:ComboBox;				//control vars		private var phaseArray,componentArray,testArray:Array;		private var refreshXML:XML;				//database timer		private var dataTimer:Timer;		private var dataInterval:Number;				public function CurrentTest(){						init();		}		//*****Initialization Routines				public function init(){			//this.visible = false;			trace("CurrentTest() init");						initVars();			initEvents();			initTxt();			initBtn();			initCmb();			initDataTimer();					}				private function initVars():void{			phaseArray=new Array({label:"wait",data:"wait"},{label:"baseline",data:"baseline"},{label:"contrast",data:"contrast"});			componentArray=new Array({label:"wait",data:"wait"},{label:"baseline",data:"baseline"},{label:"contrast",data:"contrast"});			testArray=new Array({label:"login",data:"login"},{label:"go",data:"go"},{label:"end",data:"end"});		}				private function initEvents():void{			appData.eventManager.listen("sql", onSQL);		}				private function initTxt():void{			clearTxt();		}				private function initBtn():void{			//refreshBtn			refreshBtn.buttonTitle="refresh";						var urlVars:URLVariables=new URLVariables();			urlVars.table="currentTest";			urlVars.columns="participant, test, phase, nextphase, component, componentstart,teststate";						refreshBtn.vars=urlVars;			refreshBtn.type="refreshCurrentTest";			refreshBtn.action();		}				private function initCmb():void{			phaseCmb.dataProvider=new DataProvider(phaseArray);			phaseCmb.addEventListener(Event.CHANGE, onPhaseCmbChange);						//componentCmb.dataProvider=new DataProvider(componentArray);//			componentCmb.addEventListener(Event.CHANGE, onComponentCmbChange);						testCmb.dataProvider=new DataProvider(testArray);			testCmb.addEventListener(Event.CHANGE, onTestCmbChange);		}				private function initDataTimer():void{			dataInterval=2000;			dataTimer=new Timer(dataInterval);			dataTimer.addEventListener("timer", onDataTimer);			dataTimer.start();		}		//*****Core Functionality				//**text field functions		private function clearTxt():void{			participantTxt.text="";			phaseTxt.text="";			componentTxt.text="";			componentStartTxt.text="";			testStartTxt.text="";		}				private function setTxt(part:String,phase:String,comp:String,compst:String,testst:String):void{			trace("currentTest.setTxt()");			participantTxt.text=part;			phaseTxt.text=phase;			componentTxt.text=comp;			componentStartTxt.text=new Date(Number(compst)).toLocaleTimeString();			testStartTxt.text=new Date(Number(testst)).toLocaleTimeString();		}				private function setCmb(cmb:ComboBox, val:String):void{			for(var i:uint=0;i<phaseArray.length;i++){				//var tmp:String=;				if(cmb.getItemAt(i).data.toString()==val){					cmb.selectedItem=cmb.getItemAt(i);					break;				} else {					for(var item in cmb.getItemAt(i)){						//trace(item + "==" + cmb.getItemAt(i)[item]);					}				}			}		}				//*****Event Handlers				private function onSQL(e:MuleEvent):void{			switch(e.data.type){								case "refreshCurrentTest":					//trace("e.data.result=="+e.data.result);					refreshXML=new XML(e.data.result);					//trace("refreshXML=="+refreshXML);										setTxt(refreshXML.RESULT.ROW.PARTICIPANT,refreshXML.RESULT.ROW.PHASE,refreshXML.RESULT.ROW.COMPONENT,refreshXML.RESULT.ROW.COMPONENTSTART,refreshXML.RESULT.ROW.TEST);										var nextphase:String=refreshXML.RESULT.ROW.NEXTPHASE.toString();										setCmb(phaseCmb,nextphase);					setCmb(testCmb,refreshXML.RESULT.ROW.TESTSTATE.toString());									break;							}		}				private function onPhaseCmbChange(e:Event):void{			trace("ComboBox(e.target).selectedItem.data=="+ComboBox(e.target).selectedItem.data); 						var urlVars:URLVariables=new URLVariables();			urlVars.table="currentTest";			urlVars.id="1";			urlVars.nextphase=ComboBox(e.target).selectedItem.data;						appData.sqlProxy.updateSQL(urlVars);		}				private function onComponentCmbChange(e:Event):void{			trace("ComboBox(e.target).selectedItem.data=="+ComboBox(e.target).selectedItem.data); 		}				private function onTestCmbChange(e:Event):void{			trace("ComboBox(e.target).selectedItem.data=="+ComboBox(e.target).selectedItem.data); 			var urlVars:URLVariables=new URLVariables();			urlVars.table="currentTest";			urlVars.id="1";			urlVars.teststate=ComboBox(e.target).selectedItem.data;						appData.sqlProxy.updateSQL(urlVars);		}				private function onDataTimer(e:TimerEvent):void{			refreshBtn.action();						//code for updating the data grid here		}		//*****Gets and Sets						//*****Utility Functions						public function show(){			this.visible = true;		}				public function hide(){			this.visible = false;		}				}}