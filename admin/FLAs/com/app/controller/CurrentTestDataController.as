// com.app.controller.CurrentTestDataController// Adam Riggs//package com.app.controller {	import com.adam.events.MuleEvent;	import com.adam.utils.AppData;		import flash.display.Sprite;	import flash.events.*;	import flash.net.URLVariables;		public class CurrentTestDataController {				//vars		private var _urlVars:URLVariables;				//objects		private var appData:AppData=AppData.instance;				//const		public const NAME:String="currentTestDataController";		public const RETURNTYPE:String=NAME;		private const REFRESH_DATA:String="refreshData";		private const MODEL:String="currentTestDataModel";				/** Storage for the singleton instance. */		private static const _instance:CurrentTestDataController = new CurrentTestDataController(CurrentTestDataControllerLock);				public function CurrentTestDataController(lock:Class){			// Verify that the lock is the correct class reference.			if (lock != CurrentTestDataControllerLock)			{				throw new Error("Invalid CurrentTestDataController access.  Use CurrentTestDataController.instance instead.");			} else {				init();			}		}		//*****Initialization Routines				public function init():void{			debug("init()");						initVars();			initEvents();			initObjs();		}				private function initVars():void{						_urlVars=new URLVariables();			_urlVars.table="test";			_urlVars.columns="*";					}				private function initEvents():void{			appData.eventManager.listen(NAME, onCurrentTestDataController);			appData.eventManager.listen("sql", onSQL);		}				private function initObjs():void{					}		//*****Core Functionality				private function refreshData():void{			//debug("refreshData()");						//baseline			makeRequest("baseline");			makeRequest("contrast");			makeRequest("shaping");			//makeRequest("stream");						_urlVars.where="test=\'"+appData.model.currentTestStateModel.test+"\'";			_urlVars.order="timestamp ASC";			appData.eventManager.dispatch("sqlProxy", {type:"selectSQL", sender:NAME, vars:_urlVars, returnType:MODEL+"stream"});									//maybe this should be smart enough to request only the data for the current phase of the test?			//that's easy enought to add via a switch statement later.					}				private function makeRequest(type:String):void{			_urlVars.where="test=\'"+appData.model.currentTestStateModel.test+"\' AND phase=\'"+type+"\'";						_urlVars.order="timestamp ASC";			appData.eventManager.dispatch("sqlProxy", {type:"selectSQL", sender:NAME, vars:_urlVars, returnType:MODEL+type});		}				private function getData(phaseType:String):void{			debug("getData()");			appData.controller.downloadExcel(appData.model.currentTestStateModel.participant,appData.model.currentTestStateModel.test,phaseType);		}		//*****Event Handlers				private function onSQL(e:MuleEvent):void{			/*debug("onSQL()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){								case RETURNTYPE:									break;							}		}				private function onCurrentTestDataController(e:MuleEvent):void{			/*debug("onCurrentTestDataController()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){								case REFRESH_DATA:					refreshData();				break;								case "getData":					getData(e.data.phaseType);				break;												default:					debug("onCurrentTestDataController()");					debug("*type not found");					debug("e.data.sender=="+e.data.sender);					debug("e.data.type=="+e.data.type);				break;							}		}				//*****Gets and Sets				public static function get instance():CurrentTestDataController{return _instance;}		//*****Utility Functions						//**debug		private function debug(str:String):void{			appData.debug(NAME,str);		}				}//end class}//end packageclass CurrentTestDataControllerLock{}