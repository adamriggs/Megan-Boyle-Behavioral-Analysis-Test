// com.app.controller.SQLProxy// Adam Riggs//package com.app.controller {	import flash.display.Sprite;	import flash.events.*;	import flash.net.URLVariables;		//import gs.TweenMax;		import com.adam.utils.AppData;	import com.adam.events.MuleEvent;		public class SQLProxy{						//vars		private var _baseURL,_insertURL,_updateURL,_deleteURL,_selectURL,_excelURL:String;		private var _sqlLoaderArray:Array;		private var _check:Boolean;				//objs		private var appData:AppData=AppData.instance;				//const		private static const _instance:SQLProxy=new SQLProxy(SQLProxyLock);		public const NAME:String="sqlProxy";		public const RETURNTYPE:String=NAME;				public function SQLProxy(lock:Class){			if ( lock != SQLProxyLock )			{				throw new Error( "Invalid SQLProxy access.  Use SQLProxy.instance." );			}			//init();		}		//*****Initialization Routines				public function init(){			//this.visible = false;			debug("init()");						initVars();			initEvents();			initSQLLoaderArray();		}				private function initVars():void{			_baseURL="http://adamriggs.com/clients/megan/db/";			_insertURL=baseURL+"insert.php";			_updateURL=baseURL+"update.php";			_deleteURL=baseURL+"delete.php";			_selectURL=baseURL+"select.php";			_excelURL=baseURL+"selectExcel.php";		}				private function initEvents():void{			appData.eventManager.listen(NAME, onSQLProxy);		}				private function initSQLLoaderArray():void{			_sqlLoaderArray=new Array();		}		//*****Core Functionality				//query's		public function insertSQL(vars:URLVariables,t:String="sqlResult"):void{			_sqlLoaderArray.push(new SQLLoader(_insertURL, vars, t));		}				public function updateSQL(vars:URLVariables,t:String="sqlResult"):void{			_sqlLoaderArray.push(new SQLLoader(_updateURL, vars, t));		}				public function deleteSQL(vars:URLVariables,t:String="sqlResult"):void{			_sqlLoaderArray.push(new SQLLoader(_deleteURL, vars, t));		}				public function selectSQL(vars:URLVariables,t:String="sqlResult"):void{			_sqlLoaderArray.push(new SQLLoader(_selectURL, vars, t));		}				public function excelSQL(part:String,test:String="", t:String="sqlRequest"):void{			var vars:URLVariables=new URLVariables();			vars.columns="test,event,timestamp,phase,component";			vars.table="test";			if(test==""){				vars.where="participant='"+part+"'";			} else {				vars.where="participant='"+part+"' AND test='"+test+"'";			}			vars.order="timestamp ASC";						_sqlLoaderArray.push(new SQLLoader(_excelURL, vars, t));		}						//array stuff		public function checkArrayForErrors():Boolean{			var _check:Boolean=false;						for(var i:uint=0;i<_sqlLoaderArray.length;i++){				if(_sqlLoaderArray[i].error==true){_check=true;}			}						return _check;		}				public function checkArrayStillWorking():Boolean{			var _check:Boolean=false;						for(var i:uint=0;i<_sqlLoaderArray.length;i++){				if(_sqlLoaderArray[i].working==true){_check=true;}			}						return _check;		}				public function checkArrayEverythingDone():Boolean{			var _check:Boolean=true;						for(var i:uint=0;i<_sqlLoaderArray.length;i++){				if(_sqlLoaderArray[i].success==false){_check=false;}			}						return _check;		}		//*****Event Handlers				private function onSQLProxy(e:MuleEvent):void{			/*debug("onSQLProxy()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){								case "selectSQL":					//appData.listObject(e.data.vars);					//debug("e.data.returnType=="+e.data.returnType);					selectSQL(e.data.vars,e.data.returnType);				break;							}		}		//*****Gets and Sets				public function get baseURL():String{return _baseURL;}		public function set baseURL(value:String):void{_baseURL=value;}				public function get insertURL():String{return _insertURL;}		public function set insertURL(value:String):void{_insertURL=value;}				public function get updateURL():String{return _updateURL;}		public function set updateURL(value:String):void{_updateURL=value;}				public function get deleteURL():String{return _deleteURL;}		public function set deleteURL(value:String):void{_deleteURL=value;}				public function get selectURL():String{return _selectURL;}		public function set selectURL(value:String):void{_selectURL=value;}				public function get sqlLoaderArray():Array{return _sqlLoaderArray;}				public static function get instance():SQLProxy{return _instance;}		//*****Utility Functions				//**debug		private function debug(str:String):void{			appData.debug(NAME,str);		}		}}class SQLProxyLock{}