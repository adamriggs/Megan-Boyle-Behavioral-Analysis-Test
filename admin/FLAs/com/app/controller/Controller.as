// com.app.controller.Controller// Adam Riggs//package com.app.controller {	import com.adam.events.MuleEvent;	import com.adam.utils.AppData;	import com.app.controller.SQLProxy;		import flash.display.Sprite;	import flash.events.*;	import flash.globalization.CurrencyFormatter;	import flash.net.FileReference;	import flash.net.navigateToURL;	import flash.net.sendToURL;	import flash.net.URLRequest;	import flash.net.URLVariables;		public class Controller{				//vars				//objects		private var appData:AppData=AppData.instance;		public var sql:SQLProxy;		public var currentTestStateController:CurrentTestStateController;		public var currentTestDataController:CurrentTestDataController;		public var historicalDataController:HistoricalDataController;		private var fr:FileReference;				//const		public const NAME:String="controller";		public const RETURNTYPE:String=NAME;				/** Storage for the singleton instance. */		private static const _instance:Controller = new Controller(ControllerLock);				public function Controller(lock:Class){			// Verify that the lock is the correct class reference.			if (lock != ControllerLock)			{				throw new Error("Invalid Controller access.  Use Controller.instance instead.");			} else {				//init();			}		}		//*****Initialization Routines				public function init():void{			debug("init()");						initVars();			initEvents();			initObjs();		}				private function initVars():void{					}				private function initEvents():void{			appData.eventManager.listen(NAME, onController);			appData.eventManager.listen("sql", onSQL);		}				private function initObjs():void{			sql=SQLProxy.instance;			currentTestStateController=CurrentTestStateController.instance;			currentTestDataController=CurrentTestDataController.instance;			historicalDataController=HistoricalDataController.instance;						fr=new FileReference();			fr.addEventListener(Event.OPEN, onOpen);         	fr.addEventListener(ProgressEvent.PROGRESS, onProgress);         	fr.addEventListener(Event.COMPLETE, onComplete);								}		//*****Core Functionality				public function downloadExcel(part:String,test:String="",phase:String=""):void{						var vars:URLVariables=new URLVariables();			vars.columns="test,event,timestamp,phase,component";			vars.table="test";			if(test==""){				vars.where="participant='"+part+"'";			} else if(phase==""){				vars.where="participant='"+part+"' AND test='"+test+"'";			} else {				vars.where="participant='"+part+"' AND test='"+test+"' AND phase='"+phase+"'";			}			vars.order="timestamp ASC";			vars.participant=part;						var req:URLRequest=new URLRequest("http://adamriggs.com/clients/megan/db/selectExcel.php");			req.method="POST";			req.data=vars;						navigateToURL(req, "_self");		}		//*****Event Handlers				private function onOpen(e:Event):void{			debug("onOpen()");		}				private function onProgress(e:ProgressEvent):void{			debug("onProgress()");		}				private function onComplete(e:Event):void{			debug("onComplete()");		}				private function onSQL(e:MuleEvent):void{			/*debug("onSQL()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){								case RETURNTYPE:									break;							}		}				private function onController(e:MuleEvent):void{			/*debug("onController()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){															}		}				//*****Gets and Sets				public static function get instance():Controller{return _instance;}		//*****Utility Functions				//**debug		private function debug(str:String):void{			appData.debug(NAME,str);		}				}//end class}//end packageclass ControllerLock{}