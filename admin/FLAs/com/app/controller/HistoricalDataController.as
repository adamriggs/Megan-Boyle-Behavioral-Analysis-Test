// com.app.controller.HistoricalDataController// Adam Riggs//package com.app.controller {	import com.adam.events.MuleEvent;	import com.adam.utils.AppData;		import flash.events.*;	import flash.net.URLVariables;	//import flash.net.FileReference;		public class HistoricalDataController{				//vars		private var urlVars:URLVariables;				//objects		private var appData:AppData=AppData.instance;		//private var fr:FileReference;				//const		public const NAME:String="historicalDataController";		public const RETURNTYPE:String=NAME;		public const MODEL:String="historicalDataModel";				/** Storage for the singleton instance. */		private static const _instance:HistoricalDataController = new HistoricalDataController(HistoricalDataControllerLock);				public function HistoricalDataController(lock:Class){			// Verify that the lock is the correct class reference.			if (lock != HistoricalDataControllerLock)			{				throw new Error("Invalid HistoricalDataController access.  Use HistoricalDataController.instance instead.");			} else {				init();			}		}		//*****Initialization Routines				public function init():void{			debug("init()");						initVars();			initEvents();			initObjs();		}				private function initVars():void{			urlVars=new URLVariables();		}				private function initEvents():void{			appData.eventManager.listen(NAME, onHistoricalDataController);			appData.eventManager.listen("sql", onSQL);		}				private function initObjs():void{			/*fr=new FileReference();			fr.addEventListener(Event.OPEN, onOpen);         	fr.addEventListener(ProgressEvent.PROGRESS, onProgress);         	fr.addEventListener(Event.COMPLETE, onComplete); */		}		//*****Core Functionality				private function updateParticipants():void{			debug("updateParticipants()");						//selectSQL({keyword:"DISTINCT", table:"participant", columns:"participant", where:"", order:"participant ASC"}, "participants");			urlVars=new URLVariables();			urlVars.keyword="DISTINCT";			urlVars.table="participant";			urlVars.columns="participant";			urlVars.order="participant ASC";						appData.controller.sql.selectSQL(urlVars, MODEL+"participants");					}				private function selectParticipant(part:String):void{			debug("selectParticipant("+part+")");						urlVars=new URLVariables();			urlVars.table="participant";			urlVars.columns="test";			urlVars.where="participant='"+part+"'";			urlVars.order="test ASC";						appData.controller.sql.selectSQL(urlVars, MODEL+"participantdates");					}				private function selectDate(date:String):void{			debug("selectDate()");			debug("date=="+date);						//selectSQL({keyword:"", table:"test", columns:"event,timestamp,phase,component,phaseiteration", where:"test='"+testID+"'"}, "testData");						urlVars=new URLVariables();			urlVars.table="test";			urlVars.columns="event,timestamp,phase,component,phaseiteration";			urlVars.where="test='"+date+"'";			urlVars.order="timestamp ASC";						appData.controller.sql.selectSQL(urlVars, MODEL+"datetest");					}				private function downloadParticipant(part:String):void{			debug("participant=="+part);			//appData.controller.sql.excelSQL(part);			appData.controller.downloadExcel(part);		}				private function downloadTest(part:String, test:String):void{			debug("participant=="+part);			debug("test=="+test);			//appData.controller.sql.excelSQL(part,test);			appData.controller.downloadExcel(part,test);		}						//*****Event Handlers				private function onSQL(e:MuleEvent):void{			/*debug("onSQL()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){								case RETURNTYPE:									break;							}		}				private function onHistoricalDataController(e:MuleEvent):void{			/*debug("onHistoricalDataController()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){								case "updateParticipants":					updateParticipants();				break;								case "selectParticipant":					selectParticipant(e.data.participant);				break;								case "selectDate":					selectDate(e.data.date);				break;								case "downloadParticipant":					debug("downloadParticipant");					downloadParticipant(e.data.participant);				break;								case "downloadTest":					debug("downloadTest");					downloadTest(e.data.participant, e.data.test);				break;								default:					debug("onHistoricalDataController()");					debug("*type not found");					debug("e.data.sender=="+e.data.sender);					debug("e.data.type=="+e.data.type);				break;							}		}				//*****Gets and Sets				public static function get instance():HistoricalDataController{return _instance;}		//*****Utility Functions				//**debug		private function debug(str:String):void{			appData.debug(NAME,str);		}				}//end class}//end packageclass HistoricalDataControllerLock{}