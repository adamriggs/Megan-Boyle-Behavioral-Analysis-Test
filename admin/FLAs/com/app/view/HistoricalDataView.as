// com.adam.utils.HistoricalDataView// Adam Riggs//package com.app.view {	import com.adam.events.MuleEvent;	import com.adam.utils.AppData;		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.*;	import fl.controls.List;	import fl.controls.DataGrid;		public class HistoricalDataView extends Sprite {				//vars		var circleClicked,rewardClicked,rewardDelivered:uint;		private var col1,col2,col3:String;		private var participant,date:String;		private var numIntervals:uint;				//objects		private var appData:AppData=AppData.instance;		public var dParticipantBtn,dTestBtn:MovieClip;				//display objects		public var participantsLb,datesLb:List;		public var dataDg:DataGrid;				//const		public const NAME:String="historicalDataView";		public const RETURNTYPE:String=NAME;		public const CONTROLLER:String="historicalDataController";				public function HistoricalDataView(){						init();		}		//*****Initialization Routines				public function init():void{			debug("init()");						initVars();			initEvents();			initObjs();			appData.eventManager.dispatch(CONTROLLER,{type:"updateParticipants", sender:NAME});		}				private function initVars():void{			col1="interval";			col2="clicks";			col3="consumption";						participant=date="";		}				private function initEvents():void{			appData.eventManager.listen(NAME, onHistoricalDataView);			appData.eventManager.listen("sql", onSQL);		}				private function initObjs():void{			participantsLb.addEventListener(Event.CHANGE, onChange);			datesLb.addEventListener(Event.CHANGE, onChange);						//dataDg.addColumn("Interval");//			dataDg.columns[dataDg.columns.length-1].width=50;//			dataDg.addColumn("Phase");//			dataDg.columns[dataDg.columns.length-1].width=70;//			//dataDg.addColumn("Iteration");//			dataDg.addColumn("Component");//			dataDg.addColumn("# of clicks");//			//dataDg.addColumn("# of SR deliveries");//			dataDg.addColumn("# of SR consumptions");			dataDg.columns=new Array(col1, col2, col3);						appData.makeHoverButton(dParticipantBtn, this);			dParticipantBtn.titleTxt.text="Participant Data";			appData.makeHoverButton(dTestBtn, this);			dTestBtn.titleTxt.text="Test Data";		}		//*****Core Functionality				private function updateParticipants(xml:XML):void{			debug("updateParticipants()");			//debug("xml==\n"+xml);			participantsLb.removeAll();			var i:uint;						date="";						for(i=0;i<xml.RESULT.ROW.length(); i++){				participantsLb.addItem({label:xml.RESULT.ROW[i].PARTICIPANT.toString(), data:xml.RESULT.ROW[i].PARTICIPANT.toString()});			}		}				private function updateDates(xml:XML):void{			debug("updateDates()");			//debug("xml==\n"+xml);			datesLb.removeAll();			dataDg.removeAll();			var i:uint;						for(i=0;i<xml.RESULT.ROW.length(); i++){				datesLb.addItem({label:appData.toLocalDate(xml.RESULT.ROW[i].TEST.toString()), data:xml.RESULT.ROW[i].TEST.toString()});			}		}				private function updateTest(xml:XML, arr:Array):void{			debug("updateTest()");						dataDg.removeAll();			var intervalArray:Array=new Array();			var intervalEnd:Date;			//var circleClicked,rewardClicked,rewardDelivered:uint;						try{			debug("update()");			debug("arr.length=="+arr.length);						//arr.reverse();						var condition:String="";			var component:String="";			var interval:int=1;			var i,j:uint;						dataDg.removeAll();			for(i=0,j=arr.length;i<j;i++){				//appData.listObject(arr[i]);				//debug("*****");								if(/*condition!=arr[i].phase || component!=arr[i].component || */arr[i].newComponent==true){					condition=arr[i].phase;					component=arr[i].component;					//debug("condition=="+condition);					//debug("component=="+component);					dataDg.addItem({});					dataDg.addItem({interval:"Condition", clicks:condition});					dataDg.addItem({interval:"Component", clicks:component});					dataDg.addItem({});					interval=1;										setIntervals(arr[i].phase);				}				dataDg.addItem({interval:interval.toString(),clicks:arr[i].clicks,consumption:arr[i].consumption});				interval++;			}						if(interval<=numIntervals){				for(i=interval,j=numIntervals;i<=j;i++){					dataDg.addItem({interval:i,clicks:0,consumption:0});				}			}						dataDg.scrollToIndex(dataDg.length);							} catch(e:Error){				debug("TestData error in createIntervalArray()");				debug("xml=="+xml);							}								}								private function setIntervals(phase:String):void{			debug("setInterval phase=="+phase);			switch(phase){								case "shaping":					numIntervals=12;				break;								case "baseline":					numIntervals=18;				break;								case "contrast":					numIntervals=18;				break;							}		}				private function debugCounters():void{			debug("circleClicked=="+circleClicked);			debug("rewardClicked=="+rewardClicked);			debug("rewardDelivered=="+rewardDelivered);		}				private function incrementCounters(type:String):void{			debug("incrementCounters("+type+")");			switch(type){											case "circle clicked":					circleClicked++;					debug("circle clicked");				break;								case "reward clicked":					rewardClicked++;					debug("reward clicked");				break;								case "reward delivered":					rewardDelivered++;					debug("reward delivered");				break;							}			debugCounters();		}				private function selectParticipant(part:String):void{			debug("selectParticipants("+part+")");			appData.eventManager.dispatch(CONTROLLER, {type:"selectParticipant", sender:NAME, participant:part});			datesLb.removeAll();			dataDg.removeAll();		}				private function selectDate(date:String):void{			debug("selectDate("+date+")");			appData.eventManager.dispatch(CONTROLLER, {type:"selectDate", sender:NAME, date:date});			dataDg.removeAll();		}				private function downloadParticipant():void{			if(participant!=""){				appData.eventManager.dispatch(CONTROLLER, {type:"downloadParticipant", sender:NAME, participant:participant});			}		}				private function downloadTest():void{			if(participant!="" && date!=""){				appData.eventManager.dispatch(CONTROLLER, {type:"downloadTest", sender:NAME, participant:participant, test:date});			}		}		//*****Event Handlers				public function onClick(e:MouseEvent):void{			switch(e.currentTarget){								case dParticipantBtn:					debug("dParticipantBtn click");					downloadParticipant();				break;								case dTestBtn:					debug("dTestBtn click");					downloadTest();				break;							}		}				private function onChange(e:Event):void{						switch(e.currentTarget){								case participantsLb:					debug("participantsLb - onChange");					participant=e.target.selectedItem.data.toString();					selectParticipant(e.target.selectedItem.data.toString());				break;								case datesLb:					debug("datesLb - onChange");					date=e.target.selectedItem.data.toString();					selectDate(e.target.selectedItem.data.toString());				break;							}		}				private function onSQL(e:MuleEvent):void{			/*debug("onSQL()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){								case RETURNTYPE:									break;							}		}				private function onHistoricalDataView(e:MuleEvent):void{			/*debug("onHistoricalDataView()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){								case "updateParticipants":					updateParticipants(e.data.xml);				break;								case "updateDates":					updateDates(e.data.xml);				break;								case "updateTest":					updateTest(e.data.xml,e.data.array);				break;								default:					debug("onHistoricalDataView()");					debug("*type not found");					debug("e.data.sender=="+e.data.sender);					debug("e.data.type=="+e.data.type);				break;							}		}				//*****Gets and Sets						//*****Utility Functions				//**visibility		public function show():void{			this.visible = true;		}				public function hide():void{			this.visible = false;		}				//**debug		private function debug(str:String):void{			appData.debug(NAME,str);		}				}//end class}//end package