// com.app.view.CurrentTestDataView// Adam Riggs//package com.app.view {	import com.adam.events.MuleEvent;	import com.adam.utils.AppData;		import flash.display.Sprite;	import flash.events.*;	import flash.utils.Timer;	import flash.net.URLVariables;	import flash.display.MovieClip;	import flash.display.DisplayObject;		public class CurrentTestDataView extends Sprite {				//vars		private var _dataInterval:Number;		private var _urlVars:URLVariables;		private var _panelsArray:Array;		private var phaseType:String;				//objects		private var appData:AppData=AppData.instance;		private var dataTimer:Timer;				//display objects		public var baselineBtn, contrastBtn, shapingBtn, streamBtn:MovieClip;		private var baselineDataView:BaselineDataView;		private var shapingDataView:ShapingDataView;		private var contrastDataView:ContrastDataView;		private var streamDataView:StreamDataView;		public var dDataBtn:MovieClip;				//const		public const NAME:String="currentTestDataView";		public const RETURNTYPE:String=NAME;		public const CONTROLLER:String="currentTestDataController";		public const MODEL:String="currentTestDataModel";		private const UPDATE:String="update";				public function CurrentTestDataView(){						init();		}		//*****Initialization Routines				public function init():void{			debug("init()");						initVars();			initEvents();			initObjs();		}				private function initVars():void{			//local instances of other vars			_dataInterval=appData.model.dataTimerInterval;						//vars			_urlVars=new URLVariables();			_panelsArray=new Array();			phaseType="";		}				private function initEvents():void{			appData.eventManager.listen(NAME, onCurrentTestDataView);			appData.eventManager.listen("sql", onSQL);		}				private function initObjs():void{			//timer			dataTimer=new Timer(_dataInterval);			dataTimer.addEventListener(TimerEvent.TIMER,onDataTimer);						//buttons			baselineBtn.titleTxt.text="Baseline";			appData.makeHoverButton(baselineBtn, this);						contrastBtn.titleTxt.text="Contrast";			appData.makeHoverButton(contrastBtn, this);						shapingBtn.titleTxt.text="Shaping";			appData.makeHoverButton(shapingBtn, this);						streamBtn.titleTxt.text="Stream";			appData.makeHoverButton(streamBtn, this);						//panels			baselineDataView=new BaselineDataView();			shapingDataView=new ShapingDataView();			contrastDataView=new ContrastDataView();			streamDataView=new StreamDataView();			_panelsArray=new Array(baselineDataView,shapingDataView,contrastDataView,streamDataView);						for(var i:uint=0;i<_panelsArray.length;i++){				addChild(_panelsArray[i]);				_panelsArray[i].visible=false;				_panelsArray[i].y=appData.panelY;			}						streamDataView.visible=true;						appData.makeHoverButton(dDataBtn,this);			dDataBtn.titleTxt.text="Get Data";		}		//*****Core Functionality				public function startData():void{			//debug("startData()");			dataTimer.start();			//dataTxt.text="started";		}				public function stopData():void{			//debug("stopData()");			dataTimer.stop();			dataTimer.reset();			//dataTxt.text="stopped";		}				private function update(obj:Object):void{			//populates UI with most recent data					}				private function updateBaseline(arr:Array):void{			//debug("updateBaseLine()");			baselineDataView.update(arr);		}				private function updateContrast(arr:Array):void{			//debug("updateContrast()");			contrastDataView.update(arr);		}				private function updateShaping(arr:Array):void{			//debug("updateShaping()");			shapingDataView.update(arr);		}				private function updateStream(arr:Array):void{			//debug("updateStream()");			streamDataView.update(arr);		}				private function refreshData():void{			//sends request for new data			//debug("refreshData()");			appData.eventManager.dispatch(CONTROLLER, {type:"refreshData", sender:NAME});		}				private function hideAllPanels():void{			for(var i:uint=0;i<_panelsArray.length;i++){				_panelsArray[i].visible=false;			}		}				private function showPanel(obj:DisplayObject):void{			hideAllPanels();			obj.visible=true;		}				private function clearData():void{			for(var i:uint=0;i<_panelsArray.length;i++){				_panelsArray[i].clearData();			}		}				private function getData():void{			appData.eventManager.dispatch(CONTROLLER, {type:"getData", sender:NAME, phaseType:phaseType});		}		//*****Event Handlers				private function onDataTimer(e:TimerEvent):void{			refreshData();		}				private function onSQL(e:MuleEvent):void{			/*debug("onSQL()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){								case RETURNTYPE:									break;							}		}				private function onCurrentTestDataView(e:MuleEvent):void{			/*debug("onCurrentTestDataView()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){								case UPDATE:					update(e.data.dataObj);				break;								case UPDATE+"baseline":					updateBaseline(e.data.dataObj);				break;								case UPDATE+"contrast":					updateContrast(e.data.dataObj);				break;								case UPDATE+"shaping":					updateShaping(e.data.dataObj);				break;								case UPDATE+"stream":					updateStream(e.data.dataObj);				break;								case "clearData":					clearData();				break;												default:					debug("onCurrentTestDataView()");					debug("*type not found");					debug("e.data.sender=="+e.data.sender);					debug("e.data.type=="+e.data.type);				break;							}		}				public function onClick(e:MouseEvent):void{			/*debug("onClick()");			debug("e.currentTarget.name=="+e.currentTarget.name);*/			//hideAllPanels();			//showPanel(e.currentTarget);			switch(e.currentTarget){								case baselineBtn:					debug("baseLineBtn");					//baselineDataView.visible=true;					showPanel(baselineDataView);					phaseType="baseline";				break;								case shapingBtn:					debug("shapingBtn");					//shapingDataView.visible=true;					showPanel(shapingDataView);					phaseType="shaping";				break;								case contrastBtn:					debug("contrastBtn");					//contrastDataView.visible=true;					showPanel(contrastDataView);					phaseType="contrast";				break;								case streamBtn:					debug("streamBtn");					//streamDataView.visible=true;					showPanel(streamDataView);					phaseType="";				break;								case dDataBtn:					debug("dDataBtn click");					getData();				break;							}		}				//*****Gets and Sets						//*****Utility Functions				//**visibility		public function show():void{			this.visible = true;		}				public function hide():void{			this.visible = false;		}				//**debug		private function debug(str:String):void{			appData.debug(NAME,str);		}				}//end class}//end package