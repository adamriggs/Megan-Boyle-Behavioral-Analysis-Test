// com.app.view.DataGridView// Adam Riggs//package com.app.view {	import com.adam.events.MuleEvent;	import com.adam.utils.AppData;		import fl.controls.DataGrid;	import fl.events.*;		import flash.display.Sprite;	import flash.events.*;	import flash.text.TextField;		public class DataGridView extends Sprite {				//vars		private var col1,col2,col3:String;		private var autoScroll:Boolean;		private var numIntervals:uint;		private var circleClickedTotal,rewardClickedTotal,rewardDeliveredTotal:uint;				//objects		public var appData:AppData=AppData.instance;		private var dg:DataGrid;				//display objects		public var titleTxt:TextField;				//const		public var NAME:String="dataGridView";		public var RETURNTYPE:String=NAME;				public function DataGridView(){						//init();						initVars();			initEvents();			initObjs();		}		//*****Initialization Routines				/*public function init():void{			debug("init()");						initVars();			initEvents();			initObjs();		}*/				private function initVars():void{			col1="interval";			col2="clicks";			col3="consumption";			autoScroll=true;			numIntervals=0;						circleClickedTotal=rewardClickedTotal=rewardDeliveredTotal=0;		}				private function initEvents():void{			appData.eventManager.listen(NAME, onDataGridView);			appData.eventManager.listen("sql", onSQL);		}				private function initObjs():void{			dg=new DataGrid();			dg.y=appData.panelDgY;			addChild(dg);						dg.columns=new Array(col1, col2, col3);			dg.height=550;			dg.width=399;						dg.verticalScrollBar.addEventListener(ScrollEvent.SCROLL, onScroll);		}		//*****Core Functionality				public function update(arr:Array):void{			//debug("update()");			//debug("arr.length=="+arr.length);						var condition:String="";			var component:String="";			var interval:int=1;			var i,j:uint;						circleClickedTotal=rewardClickedTotal=rewardDeliveredTotal=0;						dg.removeAll();			for(i=0,j=arr.length;i<j;i++){				/*debug("i=="+i);				debug("interval=="+interval);				appData.listObject(arr[i]);*/								if(arr[i].newComponent==true){					condition=arr[i].phase;					component=arr[i].component;										setIntervals(arr[i].phase);										if(interval<=numIntervals && interval!=1){						//debug("filling in the empty intervals");						for(var a:uint=interval;a<=numIntervals;a++){							dg.addItem({interval:a,clicks:0,consumption:0});						}					}										interval=1;										/*debug("condition=="+condition);					debug("component=="+component);*/					/*debug("interval=="+interval);					debug("condition=="+condition);					debug("component=="+component);*/										dg.addItem({});					dg.addItem({interval:"Condition", clicks:condition});					dg.addItem({interval:"Component", clicks:component});					dg.addItem({});														} else {										if(arr[i].endComponent!=true){						dg.addItem({interval:interval.toString(),clicks:arr[i].clicks,consumption:arr[i].consumption});						interval++;						//debug("interval++");						circleClickedTotal+=arr[i].clicks;						rewardClickedTotal+=arr[i].consumption;					}									}								if(interval>numIntervals){					//debug("*****interval=="+interval);				}								//debug("*****");			}						if(interval<=numIntervals){				//debug("filling in the empty intervals");				for(i=interval,j=(numIntervals);i<=j;i++){					dg.addItem({interval:i,clicks:0,consumption:0});				}			}						if(autoScroll){				//debug("autoScroll");				dg.scrollToIndex(dg.length);			}						/*debug("circleClickedTotal=="+circleClickedTotal);			debug("rewardClickedTotal=="+rewardClickedTotal);*/		}				private function setIntervals(phase:String):void{			//debug("setInterval phase=="+phase);			switch(phase){								case "shaping":					numIntervals=12;				break;								case "baseline":					numIntervals=18;				break;								case "contrast":					numIntervals=18;				break;							}		}				public function clearData():void{			dg.removeAll();		}				//*****Event Handlers				private function onScroll(e:ScrollEvent):void{			if(dg.verticalScrollPosition==dg.verticalScrollBar.maxScrollPosition){				autoScroll=true;			} else {				autoScroll=false;			}			//debug("autoScroll=="+autoScroll);		}				private function onSQL(e:MuleEvent):void{			/*debug("onSQL()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){								case RETURNTYPE:									break;							}		}				private function onDataGridView(e:MuleEvent):void{			/*debug("onDataGridView()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){																default:					debug("onDataGridView()");					debug("*type not found");					debug("e.data.sender=="+e.data.sender);					debug("e.data.type=="+e.data.type);				break;							}		}				//*****Gets and Sets						//*****Utility Functions				//**visibility		public function show():void{			this.visible = true;		}				public function hide():void{			this.visible = false;		}				//**debug		private function debug(str:String):void{			appData.debug(NAME,str);		}				}//end class}//end package