// com.app.model.HistoricalDataModel// Adam Riggs//package com.app.model {	import com.adam.events.MuleEvent;	import com.adam.utils.AppData;		import flash.events.*;		public class HistoricalDataModel{				//vars				//objects		private var appData:AppData=AppData.instance;				//const		public const NAME:String="historicalDataModel";		public const RETURNTYPE:String=NAME;		public const VIEW:String="historicalDataView";				/** Storage for the singleton instance. */		private static const _instance:HistoricalDataModel = new HistoricalDataModel(HistoricalDataModelLock);				public function HistoricalDataModel(lock:Class){			// Verify that the lock is the correct class reference.			if (lock != HistoricalDataModelLock)			{				throw new Error("Invalid HistoricalDataModel access.  Use HistoricalDataModel.instance instead.");			} else {				init();			}		}		//*****Initialization Routines				public function init():void{			debug("init()");						initVars();			initEvents();			initObjs();		}				private function initVars():void{					}				private function initEvents():void{			appData.eventManager.listen(NAME, onHistoricalDataModel);			appData.eventManager.listen("sql", onSQL);		}				private function initObjs():void{					}		//*****Core Functionality				private function processParticipants(sqlResult:String):void{			debug("processParticipants()");			var xml:XML;						try{				debug("try");				xml=new XML(sqlResult);				appData.eventManager.dispatch(VIEW, {type:"updateParticipants", sender:NAME, xml:xml});			} catch(e:Error){				debug("catch");				debug("sqlResult=="+sqlResult);			}					}				private function participantDates(sqlResult:String):void{			debug("participantDates()");			var xml:XML;						try{				debug("try");				xml=new XML(sqlResult);				appData.eventManager.dispatch(VIEW, {type:"updateDates", sender:NAME, xml:xml});			} catch(e:Error){				debug("catch");				debug("sqlResult=="+sqlResult);			}		}				private function dateTest(sqlResult:String):void{			debug("dateTest()");			//debug("sqlResult=="+sqlResult);			var xml:XML;			var arr:Array=new Array();						try{				debug("try");				xml=new XML(sqlResult);				//debug("xml=="+xml);				appData.xmlToArray(xml,arr);				appData.eventManager.dispatch(VIEW, {type:"updateTest", sender:NAME, xml:xml, array:appData.makeInterval(arr)});			} catch(e:Error){				debug("catch");				debug("sqlResult=="+sqlResult);			}		}		//*****Event Handlers				private function onSQL(e:MuleEvent):void{			/*debug("onSQL()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){								case RETURNTYPE:					debug("onSQL - RETURNTYPE");									break;								case RETURNTYPE+"participants":					debug("onSQL - RETURNTYPEparticipants");					processParticipants(e.data.result);				break;								case RETURNTYPE+"participantdates":					participantDates(e.data.result);				break;								case RETURNTYPE+"datetest":					dateTest(e.data.result);				break;							}		}				private function onHistoricalDataModel(e:MuleEvent):void{			/*debug("onHistoricalDataModel()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){								default:					debug("onHistoricalDataModel()");					debug("*type not found");					debug("e.data.sender=="+e.data.sender);					debug("e.data.type=="+e.data.type);				break;							}		}				//*****Gets and Sets				public static function get instance():HistoricalDataModel{return _instance;}		//*****Utility Functions				//**debug		private function debug(str:String):void{			appData.debug(NAME,str);		}				}//end class}//end packageclass HistoricalDataModelLock{}