// com.app.modelCurrentTestStateModel// Adam Riggs//package com.app.model{	import com.adam.events.MuleEvent;	import com.adam.utils.AppData;		import flash.display.Sprite;	import flash.events.*;	import flash.utils.Timer;	import flash.net.URLVariables;		public class CurrentTestStateModel {				private var appData:AppData=AppData.instance;				//vars		private var _xml:XML;		private var _dataObj:Object;		private var _participant,_test,_phase,_nextphase,_component,_componentstart,_teststate:String;				//objects				//const		public const NAME:String="currentTestStateModel";		public const RETURNTYPE:String=NAME;				private static const _instance:CurrentTestStateModel = new CurrentTestStateModel(CurrentTestStateModelLock);				public function CurrentTestStateModel(lock:Class){			// Verify that the lock is the correct class reference.			if (lock != CurrentTestStateModelLock)			{				throw new Error("Invalid CurrentTestStateModel access.  Use CurrentTestStateModel.instance instead.");			} else {				init();			}		}		//*****Initialization Routines				public function init():void{			debug("init()");						initVars();			initEvents();		}				private function initVars():void{						//local vars			_xml=new XML();			_dataObj=new Object();			_participant=new String();			_test=new String();			_phase=new String();			_nextphase=new String();			_component=new String();			_componentstart=new String();			_teststate=new String();		}				private function initEvents():void{			appData.eventManager.listen(NAME, onCurrentTestStateModel);			appData.eventManager.listen("sql", onSQL);		}		//*****Core Functionality						private function processData(rawData:String):void{			_xml=new XML(rawData);			//debug("xml - \n"+_xml);						var oldTest:String=_test;						//update local vars			_participant=_xml.RESULT.ROW.PARTICIPANT.toString();			_test=_xml.RESULT.ROW.TEST.toString();			_phase=_xml.RESULT.ROW.PHASE.toString();			_nextphase=_xml.RESULT.ROW.NEXTPHASE.toString();			_component=_xml.RESULT.ROW.COMPONENT.toString();			_componentstart=_xml.RESULT.ROW.COMPONENTSTART.toString();			_teststate=_xml.RESULT.ROW.TESTSTATE.toString();						//make data object			_dataObj.participant=_participant;			_dataObj.test=_test;			_dataObj.phase=_phase;			_dataObj.nextphase=_nextphase;			_dataObj.component=_component;			_dataObj.componentstart=_componentstart;			_dataObj.teststate=_teststate;						//appData.listObject(_dataObj);			//debug("_test=="+_test);						//send an event saying that the data has been updated to the view			appData.eventManager.dispatch("currentTestStateView", {type:"update", sender:NAME, dataObj:_dataObj});						if(oldTest!=test){				appData.eventManager.dispatch("currentTestDataView", {type:"clearData", sender:NAME});			}					}		//*****Event Handlers				private function onSQL(e:MuleEvent):void{			//debug("onSQL()");//			debug("e.data.sender=="+e.data.sender);//			debug("e.data.type=="+e.data.type);			switch(e.data.type){								case RETURNTYPE:					try{						processData(e.data.result);					}catch(err:Error){						debug("error processing sql result data");						debug(e.data.result);					}				break;							}		}				private function onCurrentTestStateModel(e:MuleEvent):void{			/*debug("onCurrentTestStateModel()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){																default:					debug("onCurrentTestStateModel()");					debug("*type not found");					debug("e.data.sender=="+e.data.sender);					debug("e.data.type=="+e.data.type);				break;			}		}				//*****Gets and Sets				public static function get instance():CurrentTestStateModel{return _instance;}				public function get xml():XML{return _xml;}		public function get dataObj():Object{return _dataObj;}		public function get participant():String{return _participant;}		public function get test():String{return _test;}		public function get phase():String{return _phase;}		public function get nextphase():String{return _nextphase;}		public function get component():String{return _component;}		public function get componentstart():String{return _componentstart;}		public function get teststate():String{return _teststate;}		//*****Utility Functions						//**debug		private function debug(str:String):void{			appData.debug(NAME,str);		}				}//end class}//end packageclass CurrentTestStateModelLock{}